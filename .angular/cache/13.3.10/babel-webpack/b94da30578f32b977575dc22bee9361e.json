{"ast":null,"code":"import _defineProperty from \"C:\\\\Users\\\\dsalgado.contr\\\\source\\\\Workspaces\\\\CAIU-LIBRARY\\\\CAIU-LIBRARY\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\defineProperty.js\";\nimport _createClass from \"C:\\\\Users\\\\dsalgado.contr\\\\source\\\\Workspaces\\\\CAIU-LIBRARY\\\\CAIU-LIBRARY\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\createClass.js\";\nimport _classCallCheck from \"C:\\\\Users\\\\dsalgado.contr\\\\source\\\\Workspaces\\\\CAIU-LIBRARY\\\\CAIU-LIBRARY\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\classCallCheck.js\";\nimport { build, toInt, integerArray } from \"./utils\";\nexport var DateRange = /*#__PURE__*/_createClass(function DateRange() {\n  _classCallCheck(this, DateRange);\n\n  this.startDate = null;\n  this.endDate = null;\n});\nexport var Month = /*#__PURE__*/_createClass(function Month() {\n  _classCallCheck(this, Month);\n\n  this.index = 0;\n  this.name = \"\";\n  this.abbreviation = \"\";\n  this.initial = \"\";\n});\nexport var Weekday = /*#__PURE__*/_createClass(function Weekday() {\n  _classCallCheck(this, Weekday);\n\n  this.index = 0;\n  this.name = \"\";\n  this.abbreviation = \"\";\n  this.initial = \"\";\n});\nexport var DateHelper = /*#__PURE__*/(function () {\n  var DateHelper = /*#__PURE__*/function () {\n    function DateHelper() {\n      _classCallCheck(this, DateHelper);\n    }\n\n    _createClass(DateHelper, null, [{\n      key: \"BuildStartTime\",\n      value: function BuildStartTime(startDate, startHours, startMinutes, startMeridian) {\n        var startTime = new Date(startDate);\n        var hours = startMeridian === \"AM\" ? startHours : startHours + 12;\n        startTime.setHours(hours);\n        startTime.setMinutes(startMinutes);\n        return startTime;\n      }\n    }, {\n      key: \"BuildEndTime\",\n      value: function BuildEndTime(startTime, dHours, dMinutes) {\n        var endTime = new Date(startTime);\n        endTime.setHours(endTime.getHours() + dHours);\n        endTime.setMinutes(endTime.getMinutes() + dMinutes);\n        return endTime;\n      }\n    }, {\n      key: \"CalendarDaySpan\",\n      value: function CalendarDaySpan(startDate, endDate) {\n        var daysBetween = Math.ceil(DateHelper.DaysBetween(startDate, endDate) + 1);\n        return daysBetween && daysBetween > 0 ? integerArray(daysBetween).map(function (i) {\n          var d = new Date(startDate);\n          d.setDate(new Date(startDate).getDate() + i);\n          return d;\n        }) : [new Date(startDate)];\n      }\n    }, {\n      key: \"CalendarDayStringSpan\",\n      value: function CalendarDayStringSpan(startDate, endDate) {\n        return DateHelper.CalendarDaySpan(startDate, endDate).map(function (d) {\n          return DateHelper.ToDayString(d);\n        });\n      }\n    }, {\n      key: \"CountDaysInMonth\",\n      value: function CountDaysInMonth(date) {\n        return DateHelper.DaysInMonth(date).length;\n      }\n    }, {\n      key: \"DaysBetween\",\n      value: function DaysBetween(startDate, endDate) {\n        var millisecondsPerDay = 24 * 60 * 60 * 1000;\n        return (DateHelper.TreatAsUTC(new Date(endDate)).getTime() - DateHelper.TreatAsUTC(new Date(startDate)).getTime()) / millisecondsPerDay;\n      }\n    }, {\n      key: \"DaysInMonth\",\n      value: function DaysInMonth(date) {\n        var d = new Date(date.getFullYear(), date.getMonth(), 1);\n        var days = [];\n        var month = d.getMonth();\n\n        while (d.getMonth() === month) {\n          days.push(new Date(d));\n          d.setDate(d.getDate() + 1);\n        }\n\n        return days;\n      }\n    }, {\n      key: \"FormatDate\",\n      value: function FormatDate(date) {\n        var d = new Date(date);\n        var month = \"\" + (d.getMonth() + 1);\n        var day = \"\" + d.getDate();\n        var year = d.getFullYear();\n        return month && day && year ? [month, day, year].join(\"/\") : null;\n      }\n    }, {\n      key: \"FormatDateDashes\",\n      value: function FormatDateDashes(date) {\n        var d = new Date(date);\n        var month = \"\" + (d.getMonth() + 1);\n        var day = \"\" + d.getDate();\n        var year = d.getFullYear();\n\n        if (month.length < 2) {\n          month = \"0\" + month;\n        }\n\n        if (day.length < 2) {\n          day = \"0\" + day;\n        }\n\n        return [year, month, day].join(\"-\");\n      }\n    }, {\n      key: \"FormatDateSlashes\",\n      value: function FormatDateSlashes(date) {\n        var d = new Date(date);\n        var month = \"\" + (d.getMonth() + 1);\n        var day = \"\" + d.getDate();\n        var year = d.getFullYear();\n\n        if (month.length < 2) {\n          month = \"0\" + month;\n        }\n\n        if (day.length < 2) {\n          day = \"0\" + day;\n        }\n\n        return [month, day, year].join(\"/\");\n      }\n    }, {\n      key: \"FromMonthYear\",\n      value: function FromMonthYear(monthYear) {\n        var year = DateHelper.ToYearNumberFromMonthYear(monthYear);\n        var month = DateHelper.ToMonthNumberFromMonthYear(monthYear);\n        return year && month ? new Date(year, month) : new Date();\n      }\n    }, {\n      key: \"GetFirstDayOfLastMonth\",\n      value: function GetFirstDayOfLastMonth(date) {\n        var d = new Date(date);\n        return new Date(d.getFullYear(), d.getMonth() - 1, 1);\n      }\n    }, {\n      key: \"GetFirstDayOfMonth\",\n      value: function GetFirstDayOfMonth(date) {\n        var d = new Date(date);\n        return new Date(d.getFullYear(), d.getMonth(), 1);\n      }\n    }, {\n      key: \"GetFirstDayOfNextMonth\",\n      value: function GetFirstDayOfNextMonth(date) {\n        var d = new Date(date);\n        return new Date(d.getFullYear(), d.getMonth() + 1, 1);\n      }\n    }, {\n      key: \"GetLastDayOfMonth\",\n      value: function GetLastDayOfMonth(date) {\n        var days = DateHelper.DaysInMonth(date);\n        return days[days.length - 1];\n      }\n    }, {\n      key: \"GetHour\",\n      value: function GetHour(date) {\n        var d = new Date(date);\n        return d.getHours();\n      }\n    }, {\n      key: \"GetMeridian\",\n      value: function GetMeridian(date) {\n        var hour = DateHelper.GetHour(date);\n        return hour >= 12 ? \"PM\" : \"AM\";\n      }\n    }, {\n      key: \"GetMinute\",\n      value: function GetMinute(date) {\n        var d = new Date(date);\n        return d.getMinutes();\n      }\n    }, {\n      key: \"GetMonthIndex\",\n      value: function GetMonthIndex(date) {\n        var d = new Date(date);\n        return d.getMonth();\n      }\n    }, {\n      key: \"GetMonthName\",\n      value: function GetMonthName(date) {\n        var d = new Date(date);\n        return build(Month, DateHelper.Months.find(function (x) {\n          return x.index === d.getMonth();\n        })).name;\n      }\n    }, {\n      key: \"GetShortMonthName\",\n      value: function GetShortMonthName(date) {\n        var d = new Date(date);\n        return build(Month, DateHelper.Months.find(function (x) {\n          return x.index === d.getMonth();\n        })).abbreviation;\n      }\n    }, {\n      key: \"GetWeekdayIndex\",\n      value: function GetWeekdayIndex(date) {\n        var d = new Date(date);\n        return d.getDay();\n      }\n    }, {\n      key: \"GetYear\",\n      value: function GetYear(date) {\n        var d = new Date(date);\n        return d.getFullYear();\n      }\n    }, {\n      key: \"HoursBetween\",\n      value: function HoursBetween(d1, d2) {\n        return DateHelper.MillisecondsBetween(d1, d2) / 3600000;\n      }\n    }, {\n      key: \"HoursFromBeginningOfDay\",\n      value: function HoursFromBeginningOfDay(d) {\n        var date = new Date(d);\n        return date.getHours() + date.getMinutes() / 60;\n      }\n    }, {\n      key: \"IsBetween\",\n      value: function IsBetween(d, startDate, endDate) {\n        var date = new Date(d);\n        var calculatedEndDate = endDate || startDate;\n        return startDate && date > new Date(startDate) && date < new Date(calculatedEndDate);\n      }\n    }, {\n      key: \"IsDate\",\n      value: function IsDate(date) {\n        return Object.prototype.toString.call(date) === \"[object Date]\";\n      }\n    }, {\n      key: \"IsValidDate\",\n      value: function IsValidDate(date) {\n        var dateWrapper = new Date(date);\n        return !isNaN(dateWrapper.getDate());\n      }\n    }, {\n      key: \"IsWeekday\",\n      value: function IsWeekday(d) {\n        var day = new Date(d).getDay();\n        return day === 1 || day === 2 || day === 3 || day === 4 || day === 5;\n      }\n    }, {\n      key: \"IsWeekend\",\n      value: function IsWeekend(d) {\n        var day = new Date(d).getDay();\n        return day === 0 || day === 6;\n      }\n    }, {\n      key: \"IsSameMonth\",\n      value: function IsSameMonth(d1, d2) {\n        return new Date(d1).getMonth() === new Date(d2).getMonth();\n      }\n    }, {\n      key: \"MillisecondsBetween\",\n      value: function MillisecondsBetween(d1, d2) {\n        return Math.abs(new Date(d1).getTime() - new Date(d2).getTime());\n      }\n    }, {\n      key: \"NextDay\",\n      value: function NextDay(fromDate) {\n        var today = new Date(fromDate);\n        var tomorrow = new Date();\n        tomorrow.setDate(today.getDate() + 1);\n        return tomorrow;\n      }\n    }, {\n      key: \"ParseDateDashes\",\n      value: function ParseDateDashes(date) {\n        var arr = date.split(\"-\");\n        return new Date(toInt(arr[0]), toInt(arr[1]) - 1, toInt(arr[2]));\n      }\n    }, {\n      key: \"TimeAgo\",\n      value: function TimeAgo(date) {\n        if (!date) {\n          return '';\n        }\n\n        var seconds = Math.floor((new Date().getTime() - new Date(date).getTime()) / 1000);\n        var interval = Math.floor(seconds / 31536000);\n\n        if (interval > 1) {\n          return \"\".concat(interval, \" years ago\");\n        }\n\n        interval = Math.floor(seconds / 2592000);\n\n        if (interval > 1) {\n          return \"\".concat(interval, \" months ago\");\n        }\n\n        interval = Math.floor(seconds / 86400);\n\n        if (interval > 1) {\n          return \"\".concat(interval, \" days ago\");\n        }\n\n        interval = Math.floor(seconds / 3600);\n\n        if (interval > 1) {\n          return \"\".concat(interval, \" hours ago\");\n        }\n\n        interval = Math.floor(seconds / 60);\n\n        if (interval > 1) {\n          return \"\".concat(interval, \" minutes ago\");\n        }\n\n        return 'Just Now'; // return Math.floor(seconds) + \" seconds`\"\n      }\n    }, {\n      key: \"TimeBetween\",\n      value: function TimeBetween(startDate, endDate) {\n        return new Date(endDate).getTime() - new Date(startDate).getTime();\n      }\n    }, {\n      key: \"ToDayString\",\n      value: function ToDayString(d) {\n        var date = new Date(d);\n        return \"\".concat(date.getFullYear(), \"-\").concat(date.getMonth() + 1, \"-\").concat(date.getDate());\n      }\n    }, {\n      key: \"ToMonthName\",\n      value: function ToMonthName(d) {\n        var date = new Date(d);\n        return DateHelper.MonthNames[date.getMonth()];\n      }\n    }, {\n      key: \"ToMonthNumber\",\n      value: function ToMonthNumber(d) {\n        var date = new Date(d);\n        return date.getMonth() + 1;\n      }\n    }, {\n      key: \"ToMonthNumberFromMonthYear\",\n      value: function ToMonthNumberFromMonthYear(monthYear) {\n        var month = monthYear.substr(monthYear.length - 2);\n        return toInt(month) - 1;\n      }\n    }, {\n      key: \"ToMonthNumberFromMonthYearName\",\n      value: function ToMonthNumberFromMonthYearName(monthYear) {\n        var parts = monthYear.split(/\\s*,\\s*/);\n        var month = DateHelper.MonthNumbers[parts[0]];\n        return month;\n      }\n    }, {\n      key: \"ToMonthYear\",\n      value: function ToMonthYear(d) {\n        var date = new Date(d);\n        var monthNumber = DateHelper.ToMonthNumber(date);\n        var month = monthNumber < 10 ? \"0\".concat(monthNumber) : monthNumber;\n        return \"\".concat(date.getFullYear(), \"-\").concat(month);\n      }\n    }, {\n      key: \"ToMonthYearName\",\n      value: function ToMonthYearName(d) {\n        var date = new Date(d);\n        var month = DateHelper.ToMonthName(date);\n        var year = date.getFullYear();\n        return month && year ? \"\".concat(month, \" \").concat(year) : \"\";\n      }\n    }, {\n      key: \"ToYearNumberFromMonthYear\",\n      value: function ToYearNumberFromMonthYear(monthYear) {\n        var year = monthYear.substring(0, 4);\n        return toInt(year);\n      }\n    }, {\n      key: \"TreatAsUTC\",\n      value: function TreatAsUTC(date) {\n        var result = new Date(date);\n        result.setMinutes(result.getMinutes() - result.getTimezoneOffset());\n        return result;\n      }\n    }, {\n      key: \"Today\",\n      get: function get() {\n        return new Date();\n      }\n    }, {\n      key: \"Month\",\n      get: function get() {\n        return DateHelper.Today.getMonth();\n      }\n    }, {\n      key: \"MonthNumbers\",\n      get: function get() {\n        return DateHelper.MonthNames.reduce(function (acc, x, i) {\n          return Object.assign({}, acc, _defineProperty({}, x, i));\n        });\n      }\n    }, {\n      key: \"Year\",\n      get: function get() {\n        return DateHelper.Today.getFullYear();\n      }\n    }, {\n      key: \"NextSchoolYear\",\n      get: function get() {\n        return DateHelper.Month < 7 ? DateHelper.Year : DateHelper.Year + 1;\n      }\n    }, {\n      key: \"NextSchoolYearStartDate\",\n      get: function get() {\n        return new Date(DateHelper.SchoolYearStart(DateHelper.NextSchoolYear));\n      }\n    }, {\n      key: \"PreviousSchoolYear\",\n      get: function get() {\n        return DateHelper.Month < 7 ? DateHelper.Year : DateHelper.Year + 1;\n      }\n    }, {\n      key: \"PreviousSchoolYearEndDate\",\n      get: function get() {\n        return new Date(DateHelper.SchoolYearEnd(DateHelper.PreviousSchoolYear));\n      }\n    }, {\n      key: \"FutureDate\",\n      get: function get() {\n        var date = DateHelper.Today;\n        return DateHelper.AddDays(date, 100000);\n      }\n    }, {\n      key: \"PastDate\",\n      get: function get() {\n        var date = DateHelper.Today;\n        return DateHelper.SubtractDays(date, 100000);\n      }\n    }, {\n      key: \"AddDays\",\n      value: function AddDays(d, days) {\n        var date = new Date(d);\n        date.setDate(date.getDate() + days);\n        return date;\n      }\n    }, {\n      key: \"SubtractDays\",\n      value: function SubtractDays(d, days) {\n        var date = new Date(d);\n        date.setDate(date.getDate() - days);\n        return date;\n      }\n    }, {\n      key: \"BuildDate\",\n      value: function BuildDate(year, month, day) {\n        var date = new Date();\n        date.setFullYear(year);\n        date.setMonth(month);\n        date.setDate(day);\n        return date;\n      }\n    }, {\n      key: \"DateChanged\",\n      value: function DateChanged(d1, d2) {\n        var date1 = new Date(d1);\n        var date2 = new Date(d2);\n        return date1.getDate() !== date2.getDate() || date1.getMonth() !== date2.getMonth() || date1.getFullYear() !== date2.getFullYear();\n      }\n    }, {\n      key: \"IsSameDay\",\n      value: function IsSameDay(d1, d2) {\n        var date1 = new Date(d1);\n        var date2 = new Date(d2);\n        return date1.getDate() === date2.getDate() && date1.getMonth() === date2.getMonth() && date1.getFullYear() === date2.getFullYear();\n      }\n    }, {\n      key: \"YearStartDate\",\n      get: function get() {\n        if (DateHelper.Month < 6) {\n          return DateHelper.BuildDate(DateHelper.Year - 1, 6, 1);\n        } else {\n          return DateHelper.BuildDate(DateHelper.Year, 6, 1);\n        }\n      }\n    }, {\n      key: \"PreviousYearStartDate\",\n      get: function get() {\n        if (DateHelper.Month < 6) {\n          return DateHelper.BuildDate(DateHelper.Year - 2, 6, 1);\n        } else {\n          return DateHelper.BuildDate(DateHelper.Year - 1, 6, 1);\n        }\n      }\n    }, {\n      key: \"SchoolYearStart\",\n      value: function SchoolYearStart(year) {\n        return DateHelper.BuildDate(year, 6, 1);\n      }\n    }, {\n      key: \"YearEndDate\",\n      get: function get() {\n        if (DateHelper.Month < 6) {\n          return DateHelper.BuildDate(DateHelper.Year, 5, 30);\n        } else {\n          return DateHelper.BuildDate(DateHelper.Year + 1, 5, 30);\n        }\n      }\n    }, {\n      key: \"PreviousYearEndDate\",\n      get: function get() {\n        if (DateHelper.Month < 6) {\n          return DateHelper.BuildDate(DateHelper.Year - 1, 5, 30);\n        } else {\n          return DateHelper.BuildDate(DateHelper.Year, 5, 30);\n        }\n      }\n    }, {\n      key: \"SchoolYearEnd\",\n      value: function SchoolYearEnd(year) {\n        return DateHelper.BuildDate(year - 1, 5, 30);\n      }\n    }, {\n      key: \"BuildDateRange\",\n      value: function BuildDateRange(dateRangeId) {\n        var startDate;\n        var endDate;\n\n        switch (dateRangeId) {\n          case 0:\n            break;\n\n          case 1:\n            break;\n\n          case 2:\n            // Today\n            startDate = DateHelper.Today;\n            endDate = startDate;\n            break;\n\n          case 3:\n            // Next 15\n            startDate = DateHelper.Today;\n            endDate = DateHelper.AddDays(startDate, 15);\n            break;\n\n          case 4:\n            // Next 30\n            startDate = DateHelper.Today;\n            endDate = DateHelper.AddDays(startDate, 30);\n            break;\n\n          case 5:\n            // Next 60\n            startDate = DateHelper.Today;\n            endDate = DateHelper.AddDays(startDate, 60);\n            break;\n\n          case 6:\n            // Previous 15\n            endDate = DateHelper.Today;\n            startDate = DateHelper.SubtractDays(endDate, 15);\n            break;\n\n          case 7:\n            // Previous 30\n            endDate = DateHelper.Today;\n            startDate = DateHelper.SubtractDays(endDate, 30);\n            break;\n\n          case 8:\n            // Previous 60\n            endDate = DateHelper.Today;\n            startDate = DateHelper.SubtractDays(endDate, 60);\n            break;\n\n          case 9:\n            // School Year - Runs from July 1st Thru June 30th\n            startDate = DateHelper.YearStartDate;\n            endDate = DateHelper.YearEndDate;\n            break;\n\n          case 10:\n            // Number of meetings = 10\n            startDate = DateHelper.Today;\n            endDate = DateHelper.FutureDate;\n            break;\n\n          case 11:\n            // Previous School Year\n            startDate = DateHelper.PreviousYearStartDate;\n            endDate = DateHelper.PreviousYearEndDate;\n            break;\n        }\n\n        return build(DateRange, {\n          startDate: startDate,\n          endDate: endDate\n        });\n      }\n    }, {\n      key: \"Months\",\n      get: function get() {\n        return [build(Month, {\n          name: \"January\",\n          abbreviation: \"Jan\",\n          index: 0\n        }), build(Month, {\n          name: \"February\",\n          abbreviation: \"Feb\",\n          index: 1\n        }), build(Month, {\n          name: \"March\",\n          abbreviation: \"Mar\",\n          index: 2\n        }), build(Month, {\n          name: \"April\",\n          abbreviation: \"Apr\",\n          index: 3\n        }), build(Month, {\n          name: \"May\",\n          abbreviation: \"May\",\n          index: 4\n        }), build(Month, {\n          name: \"June\",\n          abbreviation: \"June\",\n          index: 5\n        }), build(Month, {\n          name: \"July\",\n          abbreviation: \"July\",\n          index: 6\n        }), build(Month, {\n          name: \"August\",\n          abbreviation: \"Aug\",\n          index: 7\n        }), build(Month, {\n          name: \"September\",\n          abbreviation: \"Sept\",\n          index: 8\n        }), build(Month, {\n          name: \"October\",\n          abbreviation: \"Oct\",\n          index: 9\n        }), build(Month, {\n          name: \"November\",\n          abbreviation: \"Nov\",\n          index: 10\n        }), build(Month, {\n          name: \"December\",\n          abbreviation: \"Dec\",\n          index: 11\n        })];\n      }\n    }, {\n      key: \"Weekdays\",\n      get: function get() {\n        return [build(Weekday, {\n          name: \"Sunday\",\n          abbreviation: \"Sun\",\n          initial: \"Su\",\n          index: 0\n        }), build(Weekday, {\n          name: \"Monday\",\n          abbreviation: \"Mon\",\n          initial: \"M\",\n          index: 1\n        }), build(Weekday, {\n          name: \"Tuesday\",\n          abbreviation: \"Tues\",\n          initial: \"T\",\n          index: 2\n        }), build(Weekday, {\n          name: \"Wednesday\",\n          abbreviation: \"Wed\",\n          initial: \"W\",\n          index: 3\n        }), build(Weekday, {\n          name: \"Thursday\",\n          abbreviation: \"Thurs\",\n          initial: \"Th\",\n          index: 4\n        }), build(Weekday, {\n          name: \"Friday\",\n          abbreviation: \"Fri\",\n          initial: \"F\",\n          index: 5\n        }), build(Weekday, {\n          name: \"Saturday\",\n          abbreviation: \"Sat\",\n          initial: \"S\",\n          index: 6\n        })];\n      }\n    }]);\n\n    return DateHelper;\n  }();\n\n  DateHelper.MonthNames = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n  return DateHelper;\n})();\nexport function noWeekendDaysValidator() {\n  return function (control) {\n    if (control.value && Date.parse(control.value.toString())) {\n      var dateValue = new Date(control.value.toString());\n      var IsWeekend = DateHelper.IsWeekend(dateValue);\n      var formattedDate = DateHelper.FormatDate(dateValue);\n      var weekendDay = DateHelper.Weekdays[new Date(dateValue).getDay()].name;\n      return !IsWeekend ? null : {\n        weekend: \"\".concat(formattedDate, \" is a \").concat(weekendDay, \". Weekend Days are not allowed.\")\n      };\n    } else {\n      return null;\n    }\n  };\n}\nexport function dateFormatValidator() {\n  return function (control) {\n    var dt = new Date(control.value);\n    var month = dt.getMonth() + 1;\n    var day = dt.getDate();\n    var year = dt.getFullYear();\n\n    if (!correctMonthFormat(month) || !correctDayFormat(day) || !correctYearFormat(year)) {\n      return {\n        format: 'Date is not in a valid format.'\n      };\n    }\n\n    return null;\n  };\n}\n\nfunction correctMonthFormat(month) {\n  return month > 0 && month < 13;\n} // could improve to be a specific day based on the month.\n\n\nfunction correctDayFormat(day) {\n  return day > 0 && day < 32;\n}\n\nfunction correctYearFormat(year) {\n  return year > 999 && year < 10000;\n}","map":null,"metadata":{},"sourceType":"module"}