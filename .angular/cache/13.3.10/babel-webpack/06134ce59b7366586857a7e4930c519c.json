{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\dsalgado.contr\\\\source\\\\Workspaces\\\\CAIU-LIBRARY\\\\CAIU-LIBRARY\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\classCallCheck.js\";\nimport _createClass from \"C:\\\\Users\\\\dsalgado.contr\\\\source\\\\Workspaces\\\\CAIU-LIBRARY\\\\CAIU-LIBRARY\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\createClass.js\";\nimport _assertThisInitialized from \"C:\\\\Users\\\\dsalgado.contr\\\\source\\\\Workspaces\\\\CAIU-LIBRARY\\\\CAIU-LIBRARY\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\assertThisInitialized.js\";\nimport _inherits from \"C:\\\\Users\\\\dsalgado.contr\\\\source\\\\Workspaces\\\\CAIU-LIBRARY\\\\CAIU-LIBRARY\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\inherits.js\";\nimport _createSuper from \"C:\\\\Users\\\\dsalgado.contr\\\\source\\\\Workspaces\\\\CAIU-LIBRARY\\\\CAIU-LIBRARY\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\createSuper.js\";\nimport { forwardRef, ChangeDetectorRef, ElementRef, NgZone, PLATFORM_ID, EventEmitter } from '@angular/core';\nimport { isPlatformBrowser } from '@angular/common';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { MatDialog } from '@angular/material/dialog';\nimport { EditorWindowComponent } from './editor-window/editor-window.component';\nimport { Events } from './Events';\nimport * as ScriptLoader from './ScriptLoader';\nimport { getTinymce } from './TinyMCE';\nimport { bindHandlers, isTextarea, uuid, noop } from './utils';\nimport { BASIC_PLUGINS, BASIC_TOOLBAR, FULL_PLUGINS, FULL_TOOLBAR } from './editor.model';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/material/dialog\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"@angular/material/button\";\nimport * as i4 from \"@angular/material/icon\";\n\nfunction EditorComponent_ng_template_1_Template(rf, ctx) {}\n\nfunction EditorComponent_button_2_Template(rf, ctx) {\n  if (rf & 1) {\n    var _r3 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"button\", 2);\n    i0.ɵɵlistener(\"click\", function EditorComponent_button_2_Template_button_click_0_listener($event) {\n      i0.ɵɵrestoreView(_r3);\n      var ctx_r2 = i0.ɵɵnextContext();\n      return ctx_r2.expand($event);\n    });\n    i0.ɵɵelementStart(1, \"mat-icon\");\n    i0.ɵɵtext(2, \"fullscreen\");\n    i0.ɵɵelementEnd()();\n  }\n}\n\nvar scriptState = ScriptLoader.create();\nexport var EDITOR_ACCESSOR = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(function () {\n    return EditorComponent;\n  }),\n  multi: true\n};\nexport var EditorComponent = /*#__PURE__*/(function () {\n  var EditorComponent = /*#__PURE__*/function (_Events) {\n    _inherits(EditorComponent, _Events);\n\n    var _super = _createSuper(EditorComponent);\n\n    function EditorComponent(elementRef, ngZone, platformId, dialog, ref) {\n      var _this;\n\n      _classCallCheck(this, EditorComponent);\n\n      _this = _super.call(this);\n      _this.platformId = platformId;\n      _this.dialog = dialog;\n      _this.ref = ref;\n      _this.debug = false;\n      _this.cloudChannel = '5';\n      _this.apiKey = 'no-api-key';\n      _this.id = '';\n      _this.expanded = false;\n      _this.type = null;\n      _this.loaded = new EventEmitter();\n      _this.baseUrl = '/tinymce'; // Root for resources\n\n      _this.suffix = '.min'; // Suffix to use when loading resources\n\n      _this._element = undefined;\n      _this.onTouchedCallback = noop;\n      _this.onChangeCallback = noop;\n      _this._elementRef = elementRef;\n      _this.ngZone = ngZone;\n      _this.initialise = _this.initialise.bind(_assertThisInitialized(_this));\n      return _this;\n    }\n\n    _createClass(EditorComponent, [{\n      key: \"disabled\",\n      get: function get() {\n        return this._disabled;\n      },\n      set: function set(val) {\n        this._disabled = val;\n\n        if (this._editor && this._editor.initialized) {\n          this._editor.setMode(val ? 'readonly' : 'design');\n        }\n      }\n    }, {\n      key: \"editor\",\n      get: function get() {\n        return this._editor;\n      }\n    }, {\n      key: \"plugins\",\n      get: function get() {\n        if (this._plugins) {\n          return this._plugins;\n        }\n\n        switch (this.type) {\n          case 'BASIC':\n            return BASIC_PLUGINS;\n\n          case 'FULL':\n            return FULL_PLUGINS;\n\n          default:\n            return 'lists advlist';\n        }\n      },\n      set: function set(value) {\n        this._plugins = value;\n      }\n    }, {\n      key: \"toolbar\",\n      get: function get() {\n        if (this._toolbar) {\n          return this._toolbar;\n        }\n\n        switch (this.type) {\n          case 'BASIC':\n            return BASIC_TOOLBAR;\n\n          case 'FULL':\n            return FULL_TOOLBAR;\n\n          default:\n            return 'undo redo | bold italic | bullist numlist outdent indent';\n        }\n      },\n      set: function set(value) {\n        this._toolbar = value;\n      }\n    }, {\n      key: \"basic\",\n      get: function get() {\n        return this.type === 'BASIC';\n      }\n    }, {\n      key: \"full\",\n      get: function get() {\n        return this.type === 'FULL';\n      }\n    }, {\n      key: \"showExpand\",\n      get: function get() {\n        return !this.expanded;\n      }\n    }, {\n      key: \"expand\",\n      value: function expand(e) {\n        if (e && e.preventDefault) {\n          e.preventDefault();\n        }\n\n        var config = {\n          data: this._editor.getContent(),\n          width: '1200px',\n          id: this.id ? \"\".concat(this.id, \"-dialog\") : null\n        };\n        this.openDialog(config);\n      }\n    }, {\n      key: \"openDialog\",\n      value: function openDialog(config) {\n        var _this2 = this;\n\n        var dialogRef = this.dialog.open(EditorWindowComponent, config);\n        this.dialogRef = dialogRef.afterClosed().subscribe(function (result) {\n          _this2.closeDialog(result);\n        });\n      }\n    }, {\n      key: \"closeDialog\",\n      value: function closeDialog(value) {\n        if (value) {\n          this.changeValue(value);\n        }\n\n        this.dialogRef.unsubscribe();\n      }\n    }, {\n      key: \"changeValue\",\n      value: function changeValue(value) {\n        this.writeValue(value);\n        this.onChangeCallback(value);\n      }\n    }, {\n      key: \"writeValue\",\n      value: function writeValue(value) {\n        this.initialValue = value || this.initialValue;\n        value = value || '';\n\n        if (this._editor && this._editor.initialized && typeof value === 'string') {\n          this._editor.setContent(value);\n        }\n      }\n    }, {\n      key: \"registerOnChange\",\n      value: function registerOnChange(fn) {\n        this.onChangeCallback = fn;\n      }\n    }, {\n      key: \"registerOnTouched\",\n      value: function registerOnTouched(fn) {\n        this.onTouchedCallback = fn;\n      }\n    }, {\n      key: \"setDisabledState\",\n      value: function setDisabledState(isDisabled) {\n        if (this._editor) {\n          this._editor.setMode(isDisabled ? 'readonly' : 'design');\n        } else if (isDisabled) {\n          this.init = Object.assign(Object.assign({}, this.init), {\n            readonly: true\n          });\n        }\n      }\n    }, {\n      key: \"ngAfterViewInit\",\n      value: function ngAfterViewInit() {\n        if (isPlatformBrowser(this.platformId)) {\n          this.id = this.id || uuid('tiny-angular');\n          this.inline = typeof this.inline !== 'undefined' ? typeof this.inline === 'boolean' ? this.inline : true : this.init && this.init.inline;\n          this.createElement();\n\n          if (getTinymce() !== null) {\n            this.initialise();\n          } else if (this._element && this._element.ownerDocument) {\n            var doc = this._element.ownerDocument;\n            var channel = this.cloudChannel;\n            var apiKey = this.apiKey;\n            ScriptLoader.load(scriptState, doc, \"https://cdn.tiny.cloud/1/\".concat(apiKey, \"/tinymce/\").concat(channel, \"/tinymce.min.js\"), this.initialise);\n          }\n        }\n      }\n    }, {\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        if (getTinymce() !== null) {\n          getTinymce().remove(this._editor);\n        }\n      }\n    }, {\n      key: \"createElement\",\n      value: function createElement() {\n        var tagName = typeof this.tagName === 'string' ? this.tagName : 'div';\n        this._element = document.createElement(this.inline ? tagName : 'textarea');\n\n        if (this._element) {\n          this._element.id = this.id;\n\n          if (isTextarea(this._element)) {\n            this._element.style.visibility = 'hidden';\n          }\n\n          this._elementRef.nativeElement.appendChild(this._element);\n        }\n      }\n    }, {\n      key: \"initialise\",\n      value: function initialise() {\n        var _this3 = this;\n\n        var finalInit = Object.assign({}, {\n          base_url: this.baseUrl,\n          suffix: this.suffix,\n          target: this._element,\n          inline: this.inline,\n          readonly: this.disabled,\n          plugins: this.plugins,\n          toolbar: this.toolbar,\n          height: this.height,\n          branding: false,\n          default_link_target: \"_blank\",\n          contextmenu: false,\n          setup: function setup(editor) {\n            _this3._editor = editor;\n            editor.on('init', function (e) {\n              _this3.initEditor(e, editor);\n            });\n\n            if (_this3.init && typeof _this3.init.setup === 'function') {\n              _this3.init.setup(editor);\n            }\n          }\n        }, this.init);\n\n        if (isTextarea(this._element)) {\n          this._element.style.visibility = '';\n        }\n\n        if (this.debug) {\n          console.dir(this.init);\n          console.dir(finalInit);\n        }\n\n        this.ngZone.runOutsideAngular(function () {\n          getTinymce().init(finalInit);\n        });\n        this.loaded.emit(finalInit);\n      }\n    }, {\n      key: \"initEditor\",\n      value: function initEditor(initEvent, editor) {\n        var _this4 = this;\n\n        if (typeof this.initialValue === 'string') {\n          this.ngZone.run(function () {\n            return editor.setContent(_this4.initialValue);\n          });\n        }\n\n        editor.on('blur', function () {\n          return _this4.ngZone.run(function () {\n            return _this4.onTouchedCallback();\n          });\n        });\n        editor.on('change keyup undo redo', function () {\n          return _this4.ngZone.run(function () {\n            return _this4.onChangeCallback(editor.getContent());\n          });\n        });\n        bindHandlers(this, editor, initEvent);\n      }\n    }]);\n\n    return EditorComponent;\n  }(Events);\n\n  EditorComponent.ɵfac = function EditorComponent_Factory(t) {\n    return new (t || EditorComponent)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(PLATFORM_ID), i0.ɵɵdirectiveInject(i1.MatDialog), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef));\n  };\n\n  EditorComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: EditorComponent,\n    selectors: [[\"iu-editor\"]],\n    inputs: {\n      disabled: \"disabled\",\n      plugins: \"plugins\",\n      toolbar: \"toolbar\",\n      debug: \"debug\",\n      cloudChannel: \"cloudChannel\",\n      apiKey: \"apiKey\",\n      init: \"init\",\n      id: \"id\",\n      initialValue: \"initialValue\",\n      inline: \"inline\",\n      tagName: \"tagName\",\n      expanded: \"expanded\",\n      height: \"height\",\n      type: \"type\"\n    },\n    outputs: {\n      loaded: \"loaded\"\n    },\n    features: [i0.ɵɵProvidersFeature([EDITOR_ACCESSOR]), i0.ɵɵInheritDefinitionFeature],\n    decls: 3,\n    vars: 1,\n    consts: [[1, \"editor\"], [\"id\", \"expand-editor\", \"mat-button\", \"\", 3, \"click\", 4, \"ngIf\"], [\"id\", \"expand-editor\", \"mat-button\", \"\", 3, \"click\"]],\n    template: function EditorComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵtemplate(1, EditorComponent_ng_template_1_Template, 0, 0, \"ng-template\");\n        i0.ɵɵtemplate(2, EditorComponent_button_2_Template, 3, 0, \"button\", 1);\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngIf\", ctx.showExpand);\n      }\n    },\n    directives: [i2.NgIf, i3.MatButton, i4.MatIcon],\n    styles: [\"[_nghost-%COMP%]{display:block}.editor[_ngcontent-%COMP%]{position:relative;display:block;clear:both;padding:0;border-radius:2px}.editor[_ngcontent-%COMP%]   #expand-editor[_ngcontent-%COMP%]{box-shadow:0 2px 4px -1px #0003,0 4px 5px #00000024,0 1px 10px #0000001f;font-size:36px;position:absolute;right:3px;top:3px;color:#fff;text-align:center;min-width:36px;line-height:24px;padding:3px 2px;z-index:1}.editor[_ngcontent-%COMP%]   #expand-editor[_ngcontent-%COMP%]   .mat-icon[_ngcontent-%COMP%]{font-size:36px;position:relative;left:-6px;top:-7px}\"],\n    changeDetection: 0\n  });\n  return EditorComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}