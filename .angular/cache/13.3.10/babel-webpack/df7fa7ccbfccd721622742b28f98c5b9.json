{"ast":null,"code":"import { validEvents } from './Events';\n\nvar bindHandlers = function bindHandlers(ctx, editor, initEvent) {\n  validEvents.forEach(function (eventName) {\n    var eventEmitter = ctx[eventName];\n\n    if (eventName === 'onInit') {\n      ctx.ngZone.run(function () {\n        return eventEmitter.emit({\n          event: initEvent,\n          editor: editor\n        });\n      });\n    } else {\n      editor.on(eventName.substring(2), function (event) {\n        return ctx.ngZone.run(function () {\n          return eventEmitter.emit({\n            event: event,\n            editor: editor\n          });\n        });\n      });\n    }\n  });\n};\n\nvar unique = 0;\n\nvar uuid = function uuid(prefix) {\n  var date = new Date();\n  var time = date.getTime();\n  var random = Math.floor(Math.random() * 1000000000);\n  unique++;\n  return prefix + '_' + random + unique + String(time);\n};\n\nvar isTextarea = function isTextarea(element) {\n  return typeof element !== 'undefined' && element.tagName.toLowerCase() === 'textarea';\n};\n\nvar normalizePluginArray = function normalizePluginArray(plugins) {\n  if (typeof plugins === 'undefined' || plugins === '') {\n    return [];\n  }\n\n  return Array.isArray(plugins) ? plugins : plugins.split(' ');\n};\n\nvar mergePlugins = function mergePlugins(initPlugins, inputPlugins) {\n  return normalizePluginArray(initPlugins).concat(normalizePluginArray(inputPlugins));\n}; // tslint:disable-next-line:no-empty\n\n\nvar noop = function noop() {};\n\nexport { bindHandlers, uuid, isTextarea, normalizePluginArray, mergePlugins, noop };","map":null,"metadata":{},"sourceType":"module"}