{"ast":null,"code":"import _defineProperty from \"C:\\\\Users\\\\dsalgado.contr\\\\source\\\\Workspaces\\\\CAIU-LIBRARY\\\\CAIU-LIBRARY\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\defineProperty.js\";\nimport _classCallCheck from \"C:\\\\Users\\\\dsalgado.contr\\\\source\\\\Workspaces\\\\CAIU-LIBRARY\\\\CAIU-LIBRARY\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\classCallCheck.js\";\nimport _createClass from \"C:\\\\Users\\\\dsalgado.contr\\\\source\\\\Workspaces\\\\CAIU-LIBRARY\\\\CAIU-LIBRARY\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\createClass.js\";\nimport { Validators as AngularValidators } from '@angular/forms';\nimport { falsy, isNumericAndHasLength } from '../shared/utils';\nexport var Validators = /*#__PURE__*/function () {\n  function Validators() {\n    _classCallCheck(this, Validators);\n  }\n\n  _createClass(Validators, null, [{\n    key: \"compose\",\n    value: function compose(validators) {\n      return AngularValidators.compose(validators);\n    }\n  }, {\n    key: \"composeAsync\",\n    value: function composeAsync(validators) {\n      return AngularValidators.composeAsync(validators);\n    }\n  }, {\n    key: \"email\",\n    value: function email(control) {\n      if (falsy(control.value)) {\n        return null;\n      }\n\n      return AngularValidators.email(control);\n    }\n  }, {\n    key: \"exactLength\",\n    value: function exactLength(_exactLength) {\n      return function (control) {\n        return Validators.maxLength(_exactLength)(control) === null && Validators.minLength(_exactLength)(control) === null ? null : {\n          exactLength: {\n            value: control.value\n          }\n        };\n      };\n    }\n  }, {\n    key: \"max\",\n    value: function max(_max) {\n      return AngularValidators.max(_max);\n    }\n  }, {\n    key: \"maxLength\",\n    value: function maxLength(_maxLength) {\n      return AngularValidators.maxLength(_maxLength);\n    }\n  }, {\n    key: \"min\",\n    value: function min(_min) {\n      return AngularValidators.min(_min);\n    }\n  }, {\n    key: \"minLength\",\n    value: function minLength(_minLength) {\n      return AngularValidators.minLength(_minLength);\n    }\n  }, {\n    key: \"numeric\",\n    value: function numeric() {\n      var maxLength = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n      return function (control) {\n        var numeric = typeof control.value === 'number';\n        var toInt = parseInt(control.value, 10);\n        var valid = maxLength ? numeric && toInt < Math.pow(10, maxLength) : numeric;\n        return !valid ? {\n          numeric: {\n            value: control.value\n          }\n        } : null;\n      };\n    }\n  }, {\n    key: \"nullValidator\",\n    value: function nullValidator(control) {\n      return AngularValidators.nullValidator(control);\n    }\n  }, {\n    key: \"pattern\",\n    value: function pattern(_pattern) {\n      return AngularValidators.pattern(_pattern);\n    }\n  }, {\n    key: \"phone\",\n    value: function phone(control) {\n      if (falsy(control.value)) {\n        return null;\n      }\n\n      var toInt = parseInt(control.value, 10);\n      var numeric = typeof toInt === 'number' && toInt > 999999999;\n      return !numeric ? {\n        phone: {\n          value: control.value\n        }\n      } : null;\n    }\n  }, {\n    key: \"required\",\n    value: function required(control) {\n      return AngularValidators.required(control);\n    }\n  }, {\n    key: \"requiredTrue\",\n    value: function requiredTrue(control) {\n      return AngularValidators.requiredTrue(control);\n    }\n  }, {\n    key: \"zip\",\n    value: function zip(control) {\n      if (falsy(control.value)) {\n        return null;\n      }\n\n      return Validators.exactLength(5)(control) === null ? null : {\n        zip: {\n          value: control.value\n        }\n      };\n    }\n  }]);\n\n  return Validators;\n}();\nexport function atLeastOneAlphaNumericValidator(c) {\n  return c.value ? /^(?=.*[a-zA-Z].*)([a-zA-Z0-9]+)$/i.test(c.value.replace(/[^\\w\\s]/gi, '').replace(/\\s/g, '').replace(/_/g, '')) ? null : {\n    atLeastOneAlphaNumeric: true\n  } : null;\n}\nexport function confirmPasswordValidator(fg) {\n  var pass = fg.controls['password'];\n  var confirm = fg.controls['confirmPassword'];\n\n  if (pass.value !== confirm.value) {\n    confirm.setErrors({\n      confirmPwdFail: true\n    });\n    return {\n      confirmPwdFail: true\n    };\n  }\n\n  return null;\n}\nexport function numericValidator(length) {\n  var key = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'numeric';\n  return function (control) {\n    var toInt = parseInt(control.value, 10);\n    var isNumber = /^\\d+$/.test(control.value);\n    var numeric = isNumber && typeof toInt === 'number' && control.value.length === length;\n    return !numeric && !falsy(control.value) ? _defineProperty({}, key, {\n      value: control.value\n    }) : null;\n  };\n}\nexport function passwordValidator(ctrl) {\n  // const lengthReq = '{6,100}';\n  // const atleastOneNumberReq = '(?=.*[0-9])';\n  // {6,100}           - Assert password is between 6 and 100 characters\n  // (?=.*[0-9])       - Assert a string has at least one number\n  if (ctrl.value && ctrl.value.match(/^(?=.*[0-9])[a-zA-Z0-9!@#$%^&*]{6,100}$/)) {\n    return null;\n  }\n\n  return {\n    password: true\n  };\n}\nexport function phoneNumberValidator() {\n  return function (control) {\n    var formatted = /^[\\+]?[(]?[0-9]{3}[)]?[-\\s\\.]?[0-9]{3}[-\\s\\.]?[0-9]{4,6}$/im.test(control.value);\n    return !formatted ? {\n      phoneNumber: {\n        value: control.value\n      }\n    } : null;\n  };\n}\nexport function zipCodeValidator(control) {\n  var val = control.value.replace(/\\s/g, '');\n\n  if (!val) {\n    return {\n      zipCode: 'Please enter a zip code.'\n    };\n  }\n\n  if (val.length >= 5 && val.length < 9) {\n    return isNumericAndHasLength(val.indexOf('-') === -1 ? val : val.substring(0, val.indexOf('-')), 5) ? null : {\n      zipCode: 'Please enter a valid zip code.'\n    };\n  }\n\n  if (val.length === 9) {\n    return isNumericAndHasLength(val.substring(0, 5), 5) && isNumericAndHasLength(val.substring(5), 4) ? null : {\n      zipCode: 'Please enter a valid zip code.'\n    };\n  }\n\n  if (val.length === 10) {\n    return isNumericAndHasLength(val.substring(0, 5), 5) && isNumericAndHasLength(val.substring(6), 4) ? null : {\n      zipCode: 'Please enter a valid zip code.'\n    };\n  }\n\n  return {\n    zipCode: 'Please enter a valid zip code.'\n  };\n}\nexport function zipPlus4Validator() {\n  return numericValidator(4, 'zipPlus4');\n}","map":null,"metadata":{},"sourceType":"module"}