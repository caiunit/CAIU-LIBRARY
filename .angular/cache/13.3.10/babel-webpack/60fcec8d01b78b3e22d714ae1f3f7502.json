{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\dsalgado.contr\\\\source\\\\Workspaces\\\\CAIU-LIBRARY\\\\CAIU-LIBRARY\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\classCallCheck.js\";\nimport _createClass from \"C:\\\\Users\\\\dsalgado.contr\\\\source\\\\Workspaces\\\\CAIU-LIBRARY\\\\CAIU-LIBRARY\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\createClass.js\";\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\n\nimport { ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';\nimport { Effect, Actions, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { map, switchMap, catchError } from 'rxjs/operators';\nimport { RouterActions } from './actions';\nimport { RouterService } from './router.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/effects\";\nimport * as i2 from \"./router.service\";\nexport var RouterEffects = /*#__PURE__*/function () {\n  function RouterEffects(actions$, router) {\n    var _this = this;\n\n    _classCallCheck(this, RouterEffects);\n\n    this.actions$ = actions$;\n    this.router = router;\n    /**\r\n     * All imperative navigation should be performed using this effects\r\n     * so that the state is aware of the navigation.\r\n     */\n\n    this.navigate = this.actions$.pipe(ofType(RouterActions.NAVIGATE), switchMap(function (action) {\n      return _this.navigate$(action.payload);\n    }));\n  }\n\n  _createClass(RouterEffects, [{\n    key: \"navigate$\",\n    value: function navigate$(r) {\n      var nav$ = typeof r === 'string' ? this.router.navigateByUrl(r) : this.router.navigate(r);\n      return nav$.pipe(map(function () {\n        return RouterActions.navigateSuccess();\n      }), catchError(function (e) {\n        return of(RouterActions.navigateError());\n      }));\n    }\n  }]);\n\n  return RouterEffects;\n}();\n\nRouterEffects.ɵfac = function RouterEffects_Factory(t) {\n  return new (t || RouterEffects)(i0.ɵɵinject(i1.Actions), i0.ɵɵinject(i2.RouterService));\n};\n\nRouterEffects.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: RouterEffects,\n  factory: RouterEffects.ɵfac\n});\n\n__decorate([Effect(), __metadata(\"design:type\", Observable)], RouterEffects.prototype, \"navigate\", void 0);\n\nexport var CanDeactivateGuard = /*#__PURE__*/(function () {\n  var CanDeactivateGuard = /*#__PURE__*/function () {\n    function CanDeactivateGuard() {\n      _classCallCheck(this, CanDeactivateGuard);\n\n      this.destUrl = '';\n    }\n\n    _createClass(CanDeactivateGuard, [{\n      key: \"routingDestination\",\n      get: function get() {\n        return this.destUrl;\n      },\n      set: function set(url) {\n        this.destUrl = url;\n      }\n    }, {\n      key: \"canDeactivate\",\n      value: function canDeactivate(component, route, state) {\n        return component.canDeactivate ? component.canDeactivate() : true;\n      }\n    }]);\n\n    return CanDeactivateGuard;\n  }();\n\n  CanDeactivateGuard.ɵfac = function CanDeactivateGuard_Factory(t) {\n    return new (t || CanDeactivateGuard)();\n  };\n\n  CanDeactivateGuard.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: CanDeactivateGuard,\n    factory: CanDeactivateGuard.ɵfac\n  });\n  return CanDeactivateGuard;\n})();","map":null,"metadata":{},"sourceType":"module"}