{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\dsalgado.contr\\\\source\\\\Workspaces\\\\CAIU-LIBRARY\\\\CAIU-LIBRARY\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\classCallCheck.js\";\nimport _createClass from \"C:\\\\Users\\\\dsalgado.contr\\\\source\\\\Workspaces\\\\CAIU-LIBRARY\\\\CAIU-LIBRARY\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\createClass.js\";\nimport { build } from '../../shared/utils';\nexport var Timer = /*#__PURE__*/function () {\n  function Timer() {\n    _classCallCheck(this, Timer);\n\n    this.hours = 0;\n    this.minutes = 0;\n    this.seconds = 0;\n    this.milliseconds = 0;\n  }\n\n  _createClass(Timer, [{\n    key: \"zero\",\n    get: function get() {\n      return this.hours === 0 && this.minutes === 0 && this.seconds === 0 && this.milliseconds === 0;\n    }\n  }, {\n    key: \"decrementMillisecond\",\n    value: function decrementMillisecond() {\n      var milliseconds = this.milliseconds === 0 ? this.seconds > 0 ? 999 : 0 : this.milliseconds - 1;\n      var seconds = milliseconds === 59 ? this.seconds > 0 ? this.seconds - 1 : 0 : this.seconds;\n      var minutes = seconds === 59 ? this.minutes > 0 ? this.minutes - 1 : 0 : this.minutes;\n      var hours = minutes === 59 ? this.hours > 0 ? this.hours - 1 : 0 : this.hours;\n      return build(Timer, this, {\n        milliseconds: milliseconds,\n        seconds: seconds,\n        minutes: minutes,\n        hours: hours\n      });\n    }\n  }, {\n    key: \"decrementSecond\",\n    value: function decrementSecond() {\n      var milliseconds = this.milliseconds;\n      var seconds = this.seconds === 0 ? this.minutes > 0 ? 59 : 0 : this.seconds - 1;\n      var minutes = seconds === 59 ? this.minutes > 0 ? this.minutes - 1 : 0 : this.minutes;\n      var hours = minutes === 59 ? this.hours > 0 ? this.hours - 1 : 0 : this.hours;\n      return build(Timer, this, {\n        milliseconds: milliseconds,\n        seconds: seconds,\n        minutes: minutes,\n        hours: hours\n      });\n    }\n  }, {\n    key: \"decrementMinute\",\n    value: function decrementMinute() {\n      var milliseconds = this.milliseconds;\n      var seconds = this.seconds;\n      var minutes = this.minutes === 0 ? this.hours > 0 ? 59 : 0 : this.minutes - 1;\n      var hours = minutes === 59 ? this.hours > 0 ? this.hours - 1 : 0 : this.hours;\n      return build(Timer, this, {\n        milliseconds: milliseconds,\n        seconds: seconds,\n        minutes: minutes,\n        hours: hours\n      });\n    }\n  }, {\n    key: \"incrementMillisecond\",\n    value: function incrementMillisecond() {\n      var milliseconds = this.milliseconds === 999 ? 0 : this.milliseconds + 1;\n      var seconds = this.milliseconds === 999 ? this.seconds === 59 ? 0 : this.seconds + 1 : this.seconds;\n      var minutes = this.milliseconds === 999 && this.seconds === 59 ? this.minutes === 59 ? 0 : this.minutes + 1 : this.minutes;\n      var hours = this.milliseconds === 999 && this.seconds === 59 && this.minutes === 59 ? this.hours + 1 : this.hours;\n      return build(Timer, this, {\n        milliseconds: milliseconds,\n        seconds: seconds,\n        minutes: minutes,\n        hours: hours\n      });\n    }\n  }, {\n    key: \"incrementSecond\",\n    value: function incrementSecond() {\n      var milliseconds = this.milliseconds;\n      var seconds = this.seconds === 59 ? 0 : this.seconds + 1;\n      var minutes = this.seconds === 59 ? this.minutes === 59 ? 0 : this.minutes + 1 : this.minutes;\n      var hours = this.seconds === 59 && this.minutes === 59 ? this.hours + 1 : this.hours;\n      return build(Timer, this, {\n        milliseconds: milliseconds,\n        seconds: seconds,\n        minutes: minutes,\n        hours: hours\n      });\n    }\n  }, {\n    key: \"incrementMinute\",\n    value: function incrementMinute() {\n      var milliseconds = this.milliseconds;\n      var seconds = this.seconds;\n      var minutes = this.minutes === 59 ? 0 : this.minutes + 1;\n      var hours = this.minutes === 59 ? this.hours + 1 : this.hours;\n      return build(Timer, this, {\n        milliseconds: milliseconds,\n        seconds: seconds,\n        minutes: minutes,\n        hours: hours\n      });\n    }\n  }], [{\n    key: \"Equals\",\n    value: function Equals(p, q) {\n      return p.hours === q.hours && p.minutes === q.minutes && p.seconds === q.seconds && p.milliseconds === q.milliseconds;\n    }\n  }]);\n\n  return Timer;\n}();","map":null,"metadata":{},"sourceType":"module"}