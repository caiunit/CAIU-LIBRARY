{"version":3,"file":"component.d.ts","sources":["component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import { OnDestroy } from '@angular/core';\r\nimport { FormGroup } from '@angular/forms';\r\nimport { MatDialog } from '@angular/material';\r\nimport { Store, Action } from '@ngrx/store';\r\nimport { Subscription } from 'rxjs';\r\nimport { HasId } from './models';\r\nexport declare class DumbComponent implements OnDestroy {\r\n    dialog: MatDialog;\r\n    dialogRef: Subscription;\r\n    form: FormGroup;\r\n    requestState: 'DEFAULT' | 'SUCCESS' | 'ERROR';\r\n    subscriptions: Subscription[];\r\n    constructor();\r\n    readonly inErrorState: boolean;\r\n    readonly inSuccessState: boolean;\r\n    readonly message: string;\r\n    readonly showMessage: boolean;\r\n    ngOnDestroy(): void;\r\n    addSubscription(subscription: Subscription): void;\r\n    closeDialog(result: any): void;\r\n    openDialog(component: any, config?: {}): void;\r\n    removeSubscriptions(): void;\r\n    subscribe(subscriptions: Subscription[]): void;\r\n    flashErrorMessage(duration?: number): void;\r\n    flashSuccessMessage(duration?: number): void;\r\n    onError(e: any): void;\r\n    onSuccess(e: any): void;\r\n    resetRequestState(): void;\r\n    setValue(value: any): void;\r\n    toErrorState(): void;\r\n    toSucessState(): void;\r\n}\r\nexport declare class FormComponent extends DumbComponent {\r\n    form: FormGroup;\r\n    model: HasId;\r\n    readonly editing: boolean;\r\n    readonly id: number | string;\r\n    readonly isValid: boolean;\r\n    markAsSubmitted(): void;\r\n}\r\nexport declare class SmartComponent extends DumbComponent {\r\n    store: Store<any>;\r\n    events: any;\r\n    constructor(store: Store<any>);\r\n    dispatch(action: Action): void;\r\n    dispatchAndSubscribe(action: Action, onSuccess?: (e: any) => void, onError?: (e: any) => void): void;\r\n}\r\n"]}