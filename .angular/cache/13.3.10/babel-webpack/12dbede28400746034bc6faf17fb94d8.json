{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\dsalgado.contr\\\\source\\\\Workspaces\\\\CAIU-LIBRARY\\\\CAIU-LIBRARY\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\classCallCheck.js\";\nimport _createClass from \"C:\\\\Users\\\\dsalgado.contr\\\\source\\\\Workspaces\\\\CAIU-LIBRARY\\\\CAIU-LIBRARY\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\createClass.js\";\nimport { EventEmitter } from '@angular/core';\nimport { Router, ActivatedRoute, NavigationCancel, NavigationEnd, NavigationError, NavigationStart, RoutesRecognized } from '@angular/router';\nimport { Store } from '@ngrx/store';\nimport { from } from 'rxjs';\nimport { RouterActions } from './actions';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"@ngrx/store\";\nexport var RouterService = /*#__PURE__*/(function () {\n  var RouterService = /*#__PURE__*/function () {\n    function RouterService(_router, _route, store) {\n      var _this = this;\n\n      _classCallCheck(this, RouterService);\n\n      this._router = _router;\n      this._route = _route;\n      this.store = store;\n      this.navigationCancel = new EventEmitter();\n      this.navigationEnd = new EventEmitter();\n      this.navigationError = new EventEmitter();\n      this.navigationStart = new EventEmitter();\n      this.routesRecognized = new EventEmitter();\n\n      _router.events.subscribe(function (e) {\n        if (e instanceof NavigationCancel) {\n          _this.onNavigationCancel(e);\n        } else if (e instanceof NavigationEnd) {\n          _this.onNavigationEnd(e);\n        } else if (e instanceof NavigationError) {\n          _this.onNavigationError(e);\n        } else if (e instanceof NavigationStart) {\n          _this.onNavigationStart(e);\n        } else if (e instanceof RoutesRecognized) {\n          _this.onRoutesRecognized(e);\n        }\n      });\n    }\n\n    _createClass(RouterService, [{\n      key: \"onNavigationCancel\",\n      value: function onNavigationCancel(e) {\n        this.store.dispatch(RouterActions.navCancel(e));\n      }\n    }, {\n      key: \"onNavigationEnd\",\n      value: function onNavigationEnd(e) {\n        this.store.dispatch(RouterActions.navEnd(e));\n      }\n    }, {\n      key: \"onNavigationError\",\n      value: function onNavigationError(e) {\n        this.store.dispatch(RouterActions.navError(e));\n      }\n    }, {\n      key: \"onNavigationStart\",\n      value: function onNavigationStart(e) {\n        this.store.dispatch(RouterActions.navStart(e));\n      }\n    }, {\n      key: \"onRoutesRecognized\",\n      value: function onRoutesRecognized(e) {\n        this.store.dispatch(RouterActions.routesRecognized(e));\n      }\n    }, {\n      key: \"activatedRoute\",\n      get: function get() {\n        return this._route;\n      }\n    }, {\n      key: \"routeData$\",\n      get: function get() {\n        return this.activatedRoute.data;\n      }\n    }, {\n      key: \"routeParams$\",\n      get: function get() {\n        return this.activatedRoute.params;\n      }\n    }, {\n      key: \"router\",\n      get: function get() {\n        return this._router;\n      }\n    }, {\n      key: \"url$\",\n      get: function get() {\n        return this.store.select(function (s) {\n          return s.router.url;\n        });\n      }\n    }, {\n      key: \"navigate\",\n      value: function navigate(commands, extras) {\n        var promise = this.router.navigate(commands, extras);\n        return from(promise);\n      }\n    }, {\n      key: \"navigateByUrl\",\n      value: function navigateByUrl(url, extras) {\n        var promise = this.router.navigateByUrl(url, extras);\n        return from(promise);\n      }\n    }]);\n\n    return RouterService;\n  }();\n\n  RouterService.ɵfac = function RouterService_Factory(t) {\n    return new (t || RouterService)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i1.ActivatedRoute), i0.ɵɵinject(i2.Store));\n  };\n\n  RouterService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: RouterService,\n    factory: RouterService.ɵfac,\n    providedIn: 'root'\n  });\n  return RouterService;\n})();","map":null,"metadata":{},"sourceType":"module"}