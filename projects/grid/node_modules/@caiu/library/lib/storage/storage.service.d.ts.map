{"version":3,"file":"storage.service.d.ts","sources":["storage.service.d.ts"],"names":[],"mappings":"AAAA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { Store } from '@ngrx/store';\r\nimport { Action } from '../store/models';\r\nexport declare class StorageService {\r\n    store: Store<any>;\r\n    storeKey: string;\r\n    localStorageActions: string[];\r\n    sessionStorageActions: string[];\r\n    localStorageMapper: (state: any) => any;\r\n    sessionStorageMapper: (state: any) => any;\r\n    constructor(store: Store<any>, storeKey: string);\r\n    readonly localStore: any;\r\n    readonly sessionStore: any;\r\n    readonly storage: Storage;\r\n    /**\r\n     * Initialize the use of local storage and/or session storage\r\n     * @param localStorageMapper Mapper function for mapping state to local store\r\n     * @param sessionStorageMapper Mapper function for mapping state to session store\r\n     * @param localStorageActions Actions after which to save to local storage\r\n     * @param sessionStorageActions Actions after which to save to session storage\r\n     */\r\n    init(localStorageMapper?: (state: any) => any, sessionStorageMapper?: (state: any) => any, localStorageActions?: any[], sessionStorageActions?: any[]): void;\r\n    /**\r\n     * Initialize the use of local storage\r\n     * @param localStorageMapper Mapper function for mapping state to local store\r\n     * @param localStorageActions Actions after which to save to local storage\r\n     */\r\n    initLocalStore(localStorageMapper?: (state: any) => any, localStorageActions?: any[]): any;\r\n    /**\r\n     * Initialize the use of session storage\r\n     * @param sessionStorageMapper Mapper function for mapping state to session store\r\n     * @param sessionStorageActions Actions after which to save to session storage\r\n     */\r\n    initSessionStore(sessionStorageMapper?: (state: any) => any, sessionStorageActions?: any[]): Storage;\r\n    inLocalStorage(actionType: string): boolean;\r\n    inSessionStorage(actionType: string): boolean;\r\n    /**\r\n     * Store state to local storage.\r\n     */\r\n    storeLocal(state: any, action: Action): void;\r\n    /**\r\n     * Store state to session storage.\r\n     */\r\n    storeSession(state: any, action: Action): void;\r\n}\r\n"]}