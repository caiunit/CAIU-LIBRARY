{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\dsalgado.contr\\\\source\\\\Workspaces\\\\CAIU-LIBRARY\\\\CAIU-LIBRARY\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\classCallCheck.js\";\nimport _createClass from \"C:\\\\Users\\\\dsalgado.contr\\\\source\\\\Workspaces\\\\CAIU-LIBRARY\\\\CAIU-LIBRARY\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\createClass.js\";\nimport { build, truthy } from '../../shared/utils';\nexport var FileUpload = /*#__PURE__*/function () {\n  function FileUpload() {\n    _classCallCheck(this, FileUpload);\n\n    this.isPrivate = false;\n    this.lastModified = 0;\n    this.lastModifiedDate = new Date();\n    this.name = '';\n    this.size = 0;\n    this.type = '';\n    this.webkitRelativePath = '';\n    this.order = 0;\n    this.readyState = 'EMPTY';\n    this.src = '';\n  }\n\n  _createClass(FileUpload, [{\n    key: \"extension\",\n    get: function get() {\n      return this.name.split('.').pop();\n    },\n    set: function set(value) {}\n  }, {\n    key: \"isImage\",\n    get: function get() {\n      return this.type ? this.type.split('/')[0] === 'image' : false;\n    },\n    set: function set(value) {}\n  }, {\n    key: \"loading\",\n    get: function get() {\n      return this.readyState === 'LOADING';\n    },\n    set: function set(value) {}\n  }, {\n    key: \"file\",\n    get: function get() {\n      return File.BuildFromFileUpload(this);\n    },\n    set: function set(value) {}\n  }], [{\n    key: \"BuildFromFile\",\n    value: function BuildFromFile(file) {\n      return build(FileUpload, {\n        name: file.fileName,\n        size: file.fileSize,\n        type: file.mimeType,\n        src: file.src,\n        order: file.order\n      });\n    }\n  }, {\n    key: \"GetReadyState\",\n    value: function GetReadyState(reader) {\n      switch (reader.readyState) {\n        case 0:\n          return 'EMPTY';\n\n        case 1:\n          return 'LOADING';\n\n        case 2:\n          return 'DONE';\n\n        default:\n          return 'EMPTY';\n      }\n    }\n  }]);\n\n  return FileUpload;\n}();\nexport function getReadyState(reader) {\n  switch (reader.readyState) {\n    case 0:\n      return 'EMPTY';\n\n    case 1:\n      return 'LOADING';\n\n    case 2:\n      return 'DONE';\n\n    default:\n      return 'EMPTY';\n  }\n}\nexport var File = /*#__PURE__*/function () {\n  function File() {\n    _classCallCheck(this, File);\n\n    this.id = 0;\n    this.fileBinary = [];\n    this.fileExtension = '';\n    this.fileName = '';\n    this.fileSize = 0;\n    this.mimeType = '';\n    this.order = 0;\n  }\n\n  _createClass(File, [{\n    key: \"src\",\n    get: // get fileUpload(): FileUpload {\n    //     return FileUpload.BuildFromFile(this);\n    // }\n    function get() {\n      return File.GetImageBinarySrc(this);\n    }\n  }], [{\n    key: \"BuildFromFileUpload\",\n    value: function BuildFromFileUpload(upload) {\n      return build(File, {\n        fileBinary: upload.src.replace(File.GetSrcPrefix(upload.type), ''),\n        fileExtension: upload.extension,\n        fileName: upload.name,\n        fileSize: upload.size,\n        mimeType: upload.type,\n        order: upload.order\n      });\n    }\n  }, {\n    key: \"GetImageBinarySrc\",\n    value: function GetImageBinarySrc(img) {\n      var defaultSrc = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n      if (Array.isArray(img) && img.length > 0) {\n        return File.GetImageBinarySrc(img[0]);\n      } else {\n        return img && truthy(img.mimeType) && truthy(img.fileBinary) ? \"data:\".concat(img.mimeType, \";base64,\").concat(img.fileBinary) : defaultSrc;\n      }\n    }\n  }, {\n    key: \"GetSrcPrefix\",\n    value: function GetSrcPrefix(mimeType) {\n      return \"data:\".concat(mimeType, \";base64,\");\n    }\n  }]);\n\n  return File;\n}();","map":null,"metadata":{},"sourceType":"module"}