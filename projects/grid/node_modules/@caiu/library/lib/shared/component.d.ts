import { OnDestroy } from '@angular/core';
import { FormGroup } from '@angular/forms';
import { MatDialog } from '@angular/material/dialog';
import { Store, Action } from '@ngrx/store';
import { Subscription } from 'rxjs';
import { HasId } from './models';
import * as ɵngcc0 from '@angular/core';
export declare class DumbComponent implements OnDestroy {
    dialog: MatDialog;
    dialogRef: Subscription;
    form: FormGroup;
    requestState: 'DEFAULT' | 'SUCCESS' | 'ERROR';
    subscriptions: Subscription[];
    constructor();
    readonly inErrorState: boolean;
    readonly inSuccessState: boolean;
    readonly message: string;
    readonly showMessage: boolean;
    ngOnDestroy(): void;
    addSubscription(subscription: Subscription): void;
    closeDialog(result: any): void;
    openDialog(component: any, config?: {}): void;
    removeSubscriptions(): void;
    subscribe(subscriptions: Subscription[]): void;
    flashErrorMessage(duration?: number): void;
    flashSuccessMessage(duration?: number): void;
    onError(e: any): void;
    onSuccess(e: any): void;
    resetRequestState(): void;
    setValue(value: any): void;
    toErrorState(): void;
    toSucessState(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<DumbComponent, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<DumbComponent, never, never, {}, {}, never>;
}
export declare class FormComponent extends DumbComponent {
    form: FormGroup;
    model: HasId;
    readonly editing: boolean;
    readonly id: number | string;
    readonly isValid: boolean;
    markAsSubmitted(): void;
}
export declare class SmartComponent extends DumbComponent {
    store: Store<any>;
    events: any;
    constructor(store: Store<any>);
    dispatch(action: Action): void;
    dispatchAndSubscribe(action: Action, onSuccess?: (e: any) => void, onError?: (e: any) => void): void;
}

//# sourceMappingURL=component.d.ts.map