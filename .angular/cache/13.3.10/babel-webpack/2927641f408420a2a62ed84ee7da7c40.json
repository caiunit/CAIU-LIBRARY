{"ast":null,"code":"import { of, combineLatest } from 'rxjs';\nimport { map, distinctUntilChanged } from 'rxjs/operators';\nimport { Breadcrumbs } from './models';\nimport { BaseQueryModel } from '../shared/models';\nimport { toArray, toInt, truthy } from '../shared/utils';\nexport function routeSelector(store) {\n  return store.select('route');\n}\nexport function breadcrumbsSelector(store) {\n  return routeSelector(store).pipe(map(function (r) {\n    var outlets = r.activatedOutlets;\n    return new Breadcrumbs(Object.keys(outlets).map(function (key) {\n      return outlets[key];\n    }));\n  }));\n}\nexport function routeNameSelector(store) {\n  return routeSelector(store).pipe(map(function (r) {\n    return r.routeName;\n  }), distinctUntilChanged());\n}\nexport function routeParamsSelector(store) {\n  return routeSelector(store).pipe(map(function (r) {\n    return r.params;\n  }), distinctUntilChanged());\n}\nexport function lazyRouteParamsSelector(store, key) {\n  return routeParamsSelector(store).pipe(map(function (params) {\n    return params[key];\n  }), distinctUntilChanged());\n}\nexport function routeParamSelector(store, key) {\n  var defaultValue = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n  return combineLatest(of(defaultValue), lazyRouteParamsSelector(store, key), function (x, y) {\n    return y || x;\n  }).pipe(distinctUntilChanged());\n}\nexport function routeParamArraySelector(store, key) {\n  return routeParamSelector(store, key, []).pipe(map(function (x) {\n    return toArray(x);\n  }));\n}\nexport function routeParamBoolSelector(store, key) {\n  return routeParamSelector(store, key).pipe(map(function (x) {\n    return x !== 'false' && (x === 'true' || truthy(x));\n  }));\n}\nexport function routeParamIdSelector(store, key) {\n  return routeParamIntSelector(store, key);\n}\nexport function routeParamIntSelector(store, key) {\n  return routeParamSelector(store, key, 0).pipe(map(function (x) {\n    return toInt(x);\n  }));\n}\nexport function urlSelector(store) {\n  return routeSelector(store).pipe(map(function (r) {\n    return r.url;\n  }), distinctUntilChanged());\n}\nexport function urlPathSelector(store) {\n  return urlSelector(store).pipe(map(function (url) {\n    return url.indexOf('?') === -1 ? url : url.substring(0, url.indexOf('?'));\n  }), distinctUntilChanged());\n}\nexport function querySelector(store) {\n  var take = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 10;\n  var skip = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n  var term = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n  var skip$ = routeParamIntSelector(store, 'skip');\n  var take$ = routeParamIntSelector(store, 'take').pipe(map(function (x) {\n    return x === 0 ? take : x;\n  }));\n  var term$ = routeParamSelector(store, 'term');\n  return combineLatest([skip$, take$, term$]).pipe(map(function (x) {\n    return Object.assign(new BaseQueryModel(), {\n      skip: x[0],\n      take: x[1],\n      term: x[2]\n    });\n  }));\n}\nexport function navigationStatusSelector(store) {\n  return routeSelector(store).pipe(map(function (x) {\n    return x.navigationStatus;\n  }), distinctUntilChanged());\n}\nexport function navigationEndedSelector(store) {\n  return navigationStatusSelector(store).pipe(map(function (x) {\n    return x === 5;\n  }), distinctUntilChanged());\n}\nexport function previousUrlsSelector(store) {\n  return routeSelector(store).pipe(map(function (x) {\n    return x.events.filter(function (y) {\n      return y.eventType === 5;\n    }).map(function (y) {\n      return y.event['urlAfterRedirects'];\n    });\n  }));\n}\nexport function previousUrlSelector(store) {\n  return previousUrlsSelector(store).pipe(map(function (x) {\n    return x.length > 0 ? x[x.length - 1] : '/';\n  }));\n}","map":null,"metadata":{},"sourceType":"module"}