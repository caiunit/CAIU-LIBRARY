{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\dsalgado.contr\\\\source\\\\Workspaces\\\\CAIU-LIBRARY\\\\CAIU-LIBRARY\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\classCallCheck.js\";\nimport _createClass from \"C:\\\\Users\\\\dsalgado.contr\\\\source\\\\Workspaces\\\\CAIU-LIBRARY\\\\CAIU-LIBRARY\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\createClass.js\";\nimport { forwardRef, EventEmitter, ChangeDetectorRef } from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { DatepickerComponent } from '../datepicker.component';\nimport { DateRange } from '../../../shared/date';\nimport { build } from '../../../shared/utils';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../datepicker.component\";\nvar _c0 = [\"startDate\"];\nvar _c1 = [\"endDate\"];\nexport var DATERANGE_ACCESSOR = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(function () {\n    return DaterangeComponent;\n  }),\n  multi: true\n};\nexport var DaterangeComponent = /*#__PURE__*/(function () {\n  var DaterangeComponent = /*#__PURE__*/function () {\n    function DaterangeComponent(changeDetectorRef) {\n      _classCallCheck(this, DaterangeComponent);\n\n      this.changeDetectorRef = changeDetectorRef;\n      this.debug = false;\n      this.inline = false;\n      this.required = false;\n      this.startLabel = 'Start Date';\n      this.endLabel = 'End Date';\n      this.startDateChanged = new EventEmitter();\n      this.endDateChanged = new EventEmitter();\n      this._value = new DateRange();\n      this.focused = new DateRange();\n      this.now = new Date();\n    }\n\n    _createClass(DaterangeComponent, [{\n      key: \"ngOnInit\",\n      value: function ngOnInit() {}\n    }, {\n      key: \"value\",\n      get: function get() {\n        return this._value;\n      },\n      set: function set(val) {\n        this._value = val;\n\n        if (this.startDatepicker) {\n          this.startDatepicker.value = val.startDate;\n        }\n\n        if (this.endDatepicker) {\n          this.endDatepicker.value = val.endDate;\n        }\n\n        if (this && this.changeDetectorRef && !this.changeDetectorRef['destroyed']) {\n          this.changeDetectorRef.detectChanges();\n        }\n      }\n    }, {\n      key: \"startDateId\",\n      get: function get() {\n        return this.startDatepicker.id;\n      }\n    }, {\n      key: \"startDateOpened\",\n      get: function get() {\n        return this.startDatepicker.opened;\n      }\n    }, {\n      key: \"endDateId\",\n      get: function get() {\n        return this.endDatepicker.id;\n      }\n    }, {\n      key: \"endDateOpened\",\n      get: function get() {\n        return this.endDatepicker.opened;\n      }\n    }, {\n      key: \"startDateValue\",\n      get: function get() {\n        return this.value.startDate ? new Date(this.value.startDate) : null;\n      },\n      set: function set(value) {\n        this.changeStartDate(value);\n      }\n    }, {\n      key: \"endDateValue\",\n      get: function get() {\n        return this.value.endDate ? new Date(this.value.endDate) : null;\n      },\n      set: function set(value) {\n        this.changeEndDate(value);\n      }\n    }, {\n      key: \"startDateLastDay\",\n      get: function get() {\n        return new Date(this.startDateValue.getFullYear(), this.startDateValue.getMonth() + 1, 0);\n      }\n    }, {\n      key: \"filter\",\n      value: function filter(d) {\n        return this.ifMonthSame(d) || this.ifMonthDifferent(d);\n      }\n    }, {\n      key: \"changeStartDate\",\n      value: function changeStartDate(date) {\n        this.onChange(build(DateRange, {\n          endDate: this.value.endDate,\n          startDate: date\n        }));\n        this.startDateChanged.emit(date);\n      }\n    }, {\n      key: \"ifMonthSame\",\n      value: function ifMonthSame(d) {\n        return d.getMonth() === this.startDateValue.getMonth() && d.getDate() >= this.startDateValue.getDate() && d.getFullYear() === this.startDateValue.getFullYear();\n      }\n    }, {\n      key: \"ifMonthDifferent\",\n      value: function ifMonthDifferent(d) {\n        return d.getMonth() > this.startDateValue.getMonth() && d.getFullYear() >= this.startDateValue.getFullYear() && (1 < d.getDate() || this.startDateValue.getDate() <= this.startDateLastDay.getDate()) || d.getFullYear() > this.startDateValue.getFullYear();\n      }\n    }, {\n      key: \"closeStartDate\",\n      value: function closeStartDate() {\n        this.startDatepicker.close();\n      }\n    }, {\n      key: \"openStateDate\",\n      value: function openStateDate() {\n        this.startDatepicker.open();\n      }\n    }, {\n      key: \"changeEndDate\",\n      value: function changeEndDate(date) {\n        this.onChange(build(DateRange, {\n          endDate: date,\n          startDate: this.value.startDate\n        }));\n        this.endDateChanged.emit(date);\n\n        if (this.debug) {\n          console.dir('changeEndDate ran');\n          console.dir('Start Date: ' + this.startDateValue);\n          console.dir('End Date:' + date);\n        }\n      }\n    }, {\n      key: \"closeEndDate\",\n      value: function closeEndDate() {\n        this.endDatepicker.close();\n      }\n    }, {\n      key: \"openEndDate\",\n      value: function openEndDate() {\n        this.endDatepicker.open();\n      }\n    }, {\n      key: \"registerOnChange\",\n      value: function registerOnChange(fn) {\n        this.onModelChange = fn;\n      }\n    }, {\n      key: \"registerOnTouched\",\n      value: function registerOnTouched(fn) {\n        this.onTouch = fn;\n      }\n    }, {\n      key: \"writeValue\",\n      value: function writeValue(value) {\n        this.value = value;\n      }\n    }, {\n      key: \"onChange\",\n      value: function onChange(value) {\n        this.value = value;\n\n        if (this.onModelChange) {\n          this.onModelChange(value);\n        }\n      }\n    }, {\n      key: \"onFocus\",\n      value: function onFocus(value) {\n        this.focused = value;\n\n        if (this.onTouch) {\n          this.onTouch();\n        }\n      }\n    }]);\n\n    return DaterangeComponent;\n  }();\n\n  DaterangeComponent.ɵfac = function DaterangeComponent_Factory(t) {\n    return new (t || DaterangeComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef));\n  };\n\n  DaterangeComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: DaterangeComponent,\n    selectors: [[\"iu-daterange\"]],\n    viewQuery: function DaterangeComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 7);\n        i0.ɵɵviewQuery(_c1, 7);\n      }\n\n      if (rf & 2) {\n        var _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.startDatepicker = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.endDatepicker = _t.first);\n      }\n    },\n    inputs: {\n      debug: \"debug\",\n      inline: \"inline\",\n      min: \"min\",\n      max: \"max\",\n      required: \"required\",\n      startAt: \"startAt\",\n      startLabel: \"startLabel\",\n      endLabel: \"endLabel\",\n      startView: \"startView\",\n      touchUi: \"touchUi\",\n      value: \"value\"\n    },\n    outputs: {\n      startDateChanged: \"startDateChanged\",\n      endDateChanged: \"endDateChanged\"\n    },\n    features: [i0.ɵɵProvidersFeature([DATERANGE_ACCESSOR])],\n    decls: 11,\n    vars: 13,\n    consts: [[1, \"daterange\"], [1, \"start-date\"], [1, \"lbl-date\", \"iu-primary\"], [3, \"startAt\", \"required\", \"selectedChanged\"], [\"startDate\", \"\"], [1, \"end-date\"], [3, \"startAt\", \"selectedChanged\"], [\"endDate\", \"\"]],\n    template: function DaterangeComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"label\", 2);\n        i0.ɵɵtext(3);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(4, \"iu-datepicker\", 3, 4);\n        i0.ɵɵlistener(\"selectedChanged\", function DaterangeComponent_Template_iu_datepicker_selectedChanged_4_listener($event) {\n          return ctx.changeStartDate($event);\n        });\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(6, \"div\", 5)(7, \"label\", 2);\n        i0.ɵɵtext(8);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(9, \"iu-datepicker\", 6, 7);\n        i0.ɵɵlistener(\"selectedChanged\", function DaterangeComponent_Template_iu_datepicker_selectedChanged_9_listener($event) {\n          return ctx.changeEndDate($event);\n        });\n        i0.ɵɵelementEnd()()();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(1);\n        i0.ɵɵclassProp(\"date\", !ctx.inline)(\"inline-date\", ctx.inline);\n        i0.ɵɵadvance(2);\n        i0.ɵɵtextInterpolate1(\"\", ctx.startLabel, \":\");\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"startAt\", ctx.now)(\"required\", ctx.required);\n        i0.ɵɵadvance(2);\n        i0.ɵɵclassProp(\"date\", !ctx.inline)(\"inline-date\", ctx.inline);\n        i0.ɵɵadvance(2);\n        i0.ɵɵtextInterpolate1(\"\", ctx.endLabel, \":\");\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"startAt\", ctx.now);\n      }\n    },\n    directives: [i1.DatepickerComponent],\n    styles: [\".daterange[_ngcontent-%COMP%]{display:inline-block;line-height:18px;padding:0 10px;border-radius:3px}.daterange[_ngcontent-%COMP%]   .date[_ngcontent-%COMP%]{display:flex;padding:6px}.daterange[_ngcontent-%COMP%]   .inline-date[_ngcontent-%COMP%]{display:inline-flex;padding:0}.daterange[_ngcontent-%COMP%]   .inline-date.end-date[_ngcontent-%COMP%]{margin-left:32px}.daterange[_ngcontent-%COMP%]   .lbl-date[_ngcontent-%COMP%]{min-width:76px;display:inline-block;font-size:14px;padding-top:22px;margin-right:10px}\"],\n    changeDetection: 0\n  });\n  return DaterangeComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}