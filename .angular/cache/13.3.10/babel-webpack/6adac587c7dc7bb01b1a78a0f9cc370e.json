{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\dsalgado.contr\\\\source\\\\Workspaces\\\\CAIU-LIBRARY\\\\CAIU-LIBRARY\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\classCallCheck.js\";\nimport _createClass from \"C:\\\\Users\\\\dsalgado.contr\\\\source\\\\Workspaces\\\\CAIU-LIBRARY\\\\CAIU-LIBRARY\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\createClass.js\";\nimport { Event, UpdateValuePayload, Message, MessageSubscription } from './events.models';\nimport { build, guid } from '../shared/utils';\nexport var EventActions = /*#__PURE__*/(function () {\n  var EventActions = /*#__PURE__*/function () {\n    function EventActions() {\n      _classCallCheck(this, EventActions);\n    }\n\n    _createClass(EventActions, null, [{\n      key: \"addEvent\",\n      value: function addEvent(onAction, handler) {\n        var value = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n        var e = build(Event, {\n          onAction: onAction,\n          handler: handler,\n          value: value,\n          key: guid()\n        });\n        return {\n          type: EventActions.ADD_EVENT,\n          payload: e,\n          key: e.key\n        };\n      }\n    }, {\n      key: \"removeEvent\",\n      value: function removeEvent(key) {\n        return {\n          type: EventActions.REMOVE_EVENT,\n          payload: key\n        };\n      }\n    }, {\n      key: \"triggerEvent\",\n      value: function triggerEvent(action) {\n        return {\n          type: EventActions.TRIGGER_EVENT,\n          payload: action\n        };\n      }\n    }, {\n      key: \"updateValue\",\n      value: function updateValue(key, value) {\n        var payload = build(UpdateValuePayload, {\n          key: key,\n          value: value\n        });\n        return {\n          type: EventActions.UPDATE_VALUE,\n          payload: payload\n        };\n      }\n    }]);\n\n    return EventActions;\n  }();\n\n  EventActions.ADD_EVENT = '[Events] Add Event';\n  EventActions.REMOVE_EVENT = '[Events] Remove Event';\n  EventActions.TRIGGER_EVENT = '[Events] Trigger Event';\n  EventActions.UPDATE_VALUE = '[Events] Update Value';\n  return EventActions;\n})();\nexport var MessagesActions = /*#__PURE__*/(function () {\n  var MessagesActions = /*#__PURE__*/function () {\n    function MessagesActions() {\n      _classCallCheck(this, MessagesActions);\n    }\n\n    _createClass(MessagesActions, null, [{\n      key: \"add\",\n      value: function add(e, action) {\n        return {\n          type: MessagesActions.ADD,\n          payload: build(Message, {\n            channel: e.channel,\n            action: e.action,\n            message: e.mapper && typeof e.mapper === 'function' ? e.mapper(action.payload) : ''\n          })\n        };\n      }\n    }, {\n      key: \"error\",\n      value: function error(action, mapper) {\n        return {\n          type: MessagesActions.SUBSCRIBE,\n          payload: build(MessageSubscription, {\n            channel: 'ERRORS',\n            action: action,\n            mapper: mapper\n          })\n        };\n      }\n    }, {\n      key: \"toast\",\n      value: function toast(action, mapper) {\n        return {\n          type: MessagesActions.SUBSCRIBE,\n          payload: build(MessageSubscription, {\n            channel: 'TOASTS',\n            action: action,\n            mapper: mapper\n          })\n        };\n      }\n    }, {\n      key: \"subscribe\",\n      value: function subscribe(payload) {\n        return {\n          type: MessagesActions.SUBSCRIBE,\n          payload: payload\n        };\n      }\n    }, {\n      key: \"toastMessage\",\n      value: function toastMessage(action, message) {\n        return {\n          type: MessagesActions.SUBSCRIBE,\n          payload: build(Message, {\n            channel: 'TOASTS',\n            action: action,\n            mapper: function mapper(e) {\n              return message;\n            }\n          })\n        };\n      }\n    }, {\n      key: \"unsubscribe\",\n      value: function unsubscribe(payload) {\n        return {\n          type: MessagesActions.UNSUBSCRIBE,\n          payload: payload\n        };\n      }\n    }, {\n      key: \"warn\",\n      value: function warn(action, mapper) {\n        return {\n          type: MessagesActions.SUBSCRIBE,\n          payload: build(MessageSubscription, {\n            channel: 'WARNINGS',\n            action: action,\n            mapper: mapper\n          })\n        };\n      }\n    }]);\n\n    return MessagesActions;\n  }();\n\n  MessagesActions.ADD = '[Messages] Add Messages';\n  MessagesActions.CLEAR = '[Messages] Clear Messages';\n  MessagesActions.REMOVE = '[Messages] Remove Messages';\n  MessagesActions.SUBSCRIBE = '[Messages] Subscribe';\n  MessagesActions.UNSUBSCRIBE = '[Messages] Unsubscribe';\n  return MessagesActions;\n})();","map":null,"metadata":{},"sourceType":"module"}