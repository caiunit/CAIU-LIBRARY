{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\dsalgado.contr\\\\source\\\\Workspaces\\\\CAIU-LIBRARY\\\\CAIU-LIBRARY\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\classCallCheck.js\";\nimport _createClass from \"C:\\\\Users\\\\dsalgado.contr\\\\source\\\\Workspaces\\\\CAIU-LIBRARY\\\\CAIU-LIBRARY\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\createClass.js\";\nimport { ElementRef } from '@angular/core';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../collage/collage.component\";\nexport var WallpaperComponent = /*#__PURE__*/(function () {\n  var WallpaperComponent = /*#__PURE__*/function () {\n    function WallpaperComponent(elementRef) {\n      _classCallCheck(this, WallpaperComponent);\n\n      this.elementRef = elementRef;\n      this.debug = false;\n      this.images = [];\n      this.imageOpacity = .4;\n      this.bodyMargin = 0;\n      this.offsetTop = 0;\n      this.offsetLeft = 0; // @Input() positionTop = 0;\n      // @Input() positionLeft = 0;\n\n      this.minCellWidth = 40;\n      this.minCellHeight = 40;\n      this.maxTileWidth = 240;\n      this.maxTileHeight = 400;\n      this.shuffle = false;\n      this.clientHeight = 0;\n      this.clientWidth = 0;\n    }\n\n    _createClass(WallpaperComponent, [{\n      key: \"maxColumns\",\n      get: function get() {\n        return Math.floor(this.maxTileWidth / this.minCellWidth);\n      }\n    }, {\n      key: \"maxRows\",\n      get: function get() {\n        return Math.floor(this.maxTileHeight / this.minCellHeight);\n      }\n    }, {\n      key: \"positionLeft\",\n      get: function get() {\n        return this.offsetLeft === 0 ? -this.bodyMargin : this.offsetLeft - this.bodyMargin;\n      }\n    }, {\n      key: \"positionTop\",\n      get: function get() {\n        return this.offsetTop === 0 ? -this.bodyMargin : this.offsetTop - this.bodyMargin;\n      }\n    }, {\n      key: \"totalColumns\",\n      get: function get() {\n        return Math.floor(this.canvasWidth / this.minCellWidth);\n      }\n    }, {\n      key: \"totalRows\",\n      get: function get() {\n        return Math.floor(this.canvasHeight / this.minCellHeight);\n      }\n    }, {\n      key: \"canvasHeight\",\n      get: function get() {\n        return this.windowHeight ? this.windowHeight - this.offsetTop - this.bodyMargin : this.clientHeight;\n      }\n    }, {\n      key: \"canvasWidth\",\n      get: function get() {\n        return this.windowWidth ? this.windowWidth - this.offsetLeft - this.bodyMargin : this.clientWidth;\n      }\n    }, {\n      key: \"windowHeight\",\n      get: function get() {\n        return parseInt(localStorage.getItem('WINDOW_HEIGHT'), 10);\n      },\n      set: function set(value) {\n        // console.log('\\n\\nWindow Height:\\t', value);\n        localStorage.setItem('WINDOW_HEIGHT', value.toString());\n      }\n    }, {\n      key: \"windowWidth\",\n      get: function get() {\n        return parseInt(localStorage.getItem('WINDOW_WIDTH'), 10);\n      },\n      set: function set(value) {\n        // console.log('Window Width:\\t', value);\n        localStorage.setItem('WINDOW_WIDTH', value.toString());\n      }\n    }, {\n      key: \"onLoad\",\n      value: function onLoad(e) {\n        this.windowHeight = e && e.currentTarget && e.currentTarget.innerHeight ? e.currentTarget.innerHeight : 0;\n        this.windowWidth = e && e.currentTarget && e.currentTarget.innerWidth ? e.currentTarget.innerWidth : 0;\n        this.resetDimensions();\n      }\n    }, {\n      key: \"onResize\",\n      value: function onResize(e) {\n        this.windowHeight = e && e.currentTarget && e.currentTarget.innerHeight ? e.currentTarget.innerHeight : 0;\n        this.windowWidth = e && e.currentTarget && e.currentTarget.innerWidth ? e.currentTarget.innerWidth : 0;\n        this.resetDimensions();\n      }\n    }, {\n      key: \"ngOnInit\",\n      value: function ngOnInit() {\n        this.resetDimensions();\n      }\n    }, {\n      key: \"resetDimensions\",\n      value: function resetDimensions() {\n        this.clientHeight = this.elementRef.nativeElement.clientHeight;\n        this.clientWidth = this.elementRef.nativeElement.clientWidth;\n\n        if (this.debug) {\n          this.logDimensions();\n        }\n      }\n    }, {\n      key: \"logDimensions\",\n      value: function logDimensions() {\n        console.log('\\n\\nWindow Height:\\t', this.windowHeight);\n        console.log('Window Width:\\t', this.windowWidth);\n        console.log('Canvas Height:\\t', this.canvasHeight);\n        console.log('Canvas Width:\\t', this.canvasWidth);\n        console.log('Client Height:\\t', this.clientHeight);\n        console.log('Client Width:\\t', this.clientWidth);\n      }\n    }]);\n\n    return WallpaperComponent;\n  }();\n\n  WallpaperComponent.ɵfac = function WallpaperComponent_Factory(t) {\n    return new (t || WallpaperComponent)(i0.ɵɵdirectiveInject(i0.ElementRef));\n  };\n\n  WallpaperComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: WallpaperComponent,\n    selectors: [[\"iu-wallpaper\"]],\n    hostBindings: function WallpaperComponent_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"load\", function WallpaperComponent_load_HostBindingHandler($event) {\n          return ctx.onLoad($event);\n        }, false, i0.ɵɵresolveWindow)(\"resize\", function WallpaperComponent_resize_HostBindingHandler($event) {\n          return ctx.onResize($event);\n        }, false, i0.ɵɵresolveWindow);\n      }\n    },\n    inputs: {\n      debug: \"debug\",\n      images: \"images\",\n      imageOpacity: \"imageOpacity\",\n      bodyMargin: \"bodyMargin\",\n      offsetTop: \"offsetTop\",\n      offsetLeft: \"offsetLeft\",\n      minCellWidth: \"minCellWidth\",\n      minCellHeight: \"minCellHeight\",\n      maxTileWidth: \"maxTileWidth\",\n      maxTileHeight: \"maxTileHeight\",\n      shuffle: \"shuffle\"\n    },\n    decls: 2,\n    vars: 17,\n    consts: [[1, \"wallpaper\"], [3, \"images\", \"canvasHeight\", \"canvasWidth\", \"totalRows\", \"totalColumns\", \"maxRows\", \"maxColumns\", \"imageOpacity\", \"shuffle\"]],\n    template: function WallpaperComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵelement(1, \"iu-collage\", 1);\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵstyleProp(\"height\", ctx.canvasHeight, \"px\")(\"width\", ctx.canvasWidth, \"px\")(\"top\", ctx.positionTop, \"px\")(\"left\", ctx.positionLeft, \"px\");\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"images\", ctx.images)(\"canvasHeight\", ctx.canvasHeight)(\"canvasWidth\", ctx.canvasWidth)(\"totalRows\", ctx.totalRows)(\"totalColumns\", ctx.totalColumns)(\"maxRows\", ctx.maxRows)(\"maxColumns\", ctx.maxColumns)(\"imageOpacity\", ctx.imageOpacity)(\"shuffle\", ctx.shuffle);\n      }\n    },\n    directives: [i1.CollageComponent],\n    styles: [\"[_nghost-%COMP%]{display:block}.wallpaper[_ngcontent-%COMP%]{height:100%;width:100%;overflow:hidden;position:fixed}\"]\n  });\n  return WallpaperComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}