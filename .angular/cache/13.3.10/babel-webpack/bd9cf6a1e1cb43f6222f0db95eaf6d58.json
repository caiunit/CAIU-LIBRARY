{"ast":null,"code":"import _toConsumableArray from \"C:\\\\Users\\\\dsalgado.contr\\\\source\\\\Workspaces\\\\CAIU-LIBRARY\\\\CAIU-LIBRARY\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\toConsumableArray.js\";\nimport _classCallCheck from \"C:\\\\Users\\\\dsalgado.contr\\\\source\\\\Workspaces\\\\CAIU-LIBRARY\\\\CAIU-LIBRARY\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\classCallCheck.js\";\nimport _createClass from \"C:\\\\Users\\\\dsalgado.contr\\\\source\\\\Workspaces\\\\CAIU-LIBRARY\\\\CAIU-LIBRARY\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\createClass.js\";\nimport _get from \"C:\\\\Users\\\\dsalgado.contr\\\\source\\\\Workspaces\\\\CAIU-LIBRARY\\\\CAIU-LIBRARY\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\get.js\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\dsalgado.contr\\\\source\\\\Workspaces\\\\CAIU-LIBRARY\\\\CAIU-LIBRARY\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\getPrototypeOf.js\";\nimport _inherits from \"C:\\\\Users\\\\dsalgado.contr\\\\source\\\\Workspaces\\\\CAIU-LIBRARY\\\\CAIU-LIBRARY\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\inherits.js\";\nimport _createSuper from \"C:\\\\Users\\\\dsalgado.contr\\\\source\\\\Workspaces\\\\CAIU-LIBRARY\\\\CAIU-LIBRARY\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\createSuper.js\";\nimport { FormArray as Ng2FormArray } from '@angular/forms';\nimport { buildAbstractControl, buildControlsConfig } from './utils';\nimport { build, getValue as _getValue, toArray } from '../shared/utils';\nexport var FormArray = /*#__PURE__*/function (_Ng2FormArray) {\n  _inherits(FormArray, _Ng2FormArray);\n\n  var _super = _createSuper(FormArray);\n\n  function FormArray(fb, controls, validator, asyncValidator) {\n    var _this;\n\n    _classCallCheck(this, FormArray);\n\n    _this = _super.call(this, controls, validator, asyncValidator);\n    _this.fb = fb;\n    return _this;\n  }\n\n  _createClass(FormArray, [{\n    key: \"maxIndex\",\n    get: function get() {\n      return this.length - 1;\n    }\n  }, {\n    key: \"values\",\n    get: function get() {\n      return _toConsumableArray(this.value);\n    }\n  }, {\n    key: \"buildControls\",\n    value: function buildControls(n) {\n      var _this2 = this;\n\n      return this.buildItems(n).map(function (x) {\n        return buildAbstractControl(_this2.fb, x);\n      });\n    }\n  }, {\n    key: \"buildItems\",\n    value: function buildItems(n) {\n      var _this3 = this;\n\n      return Array.from(Array(n).keys()).map(function (x) {\n        return _this3.ctor ? _getValue(new _this3.ctor()) : {};\n      });\n    }\n  }, {\n    key: \"getValue\",\n    value: function getValue(value) {\n      var _this4 = this;\n\n      return this.ctor ? toArray(value).map(function (x) {\n        return _getValue(build(_this4.ctor, x));\n      }) : value;\n    }\n  }, {\n    key: \"resetValue\",\n    value: function resetValue(value) {\n      this.removeAll();\n      this.addControls(value);\n      this.setValue(value);\n    }\n  }, {\n    key: \"setLength\",\n    value: function setLength(value) {\n      if (this.length < value) {\n        this.add(value - this.length);\n      } else if (this.length > value) {\n        this.remove(this.length - value);\n      }\n    }\n  }, {\n    key: \"setValue\",\n    value: function setValue(value) {\n      this.setLength(value.length);\n\n      _get(_getPrototypeOf(FormArray.prototype), \"setValue\", this).call(this, this.getValue(value));\n    }\n  }, {\n    key: \"findControlById\",\n    value: function findControlById(id) {\n      return this.controls.find(function (control) {\n        return control.value && control.value['id'] && control.value['id'] === id;\n      });\n    }\n  }, {\n    key: \"removeAll\",\n    value: function removeAll() {\n      this.controls = [];\n    }\n  }, {\n    key: \"removeIndexes\",\n    value: function removeIndexes(indexes) {\n      var _this5 = this;\n\n      indexes.forEach(function (index) {\n        _this5.removeAt(index);\n      });\n    }\n  }, {\n    key: \"add\",\n    value: function add(n) {\n      var _this6 = this;\n\n      this.buildControls(n).forEach(function (x) {\n        _this6.push(x);\n      });\n    }\n  }, {\n    key: \"remove\",\n    value: function remove(n) {\n      var _this7 = this;\n\n      var k = Math.min(n, this.length);\n      Array.from(Array(k).keys()).forEach(function (x) {\n        _this7.removeAt(_this7.maxIndex);\n      });\n    }\n  }, {\n    key: \"addControls\",\n    value: function addControls(value) {\n      var _this8 = this;\n\n      var controls = value.map(function (x) {\n        return _this8.fb.group(buildControlsConfig(x, _this8.fb));\n      });\n      controls.forEach(function (control) {\n        _this8.push(control);\n      });\n    }\n    /**\r\n     * Set value of each control.\r\n     * @param ctor Class constructor\r\n     * @param props Values to assign to props of each control\r\n     */\n\n  }, {\n    key: \"setAll\",\n    value: function setAll(ctor, props) {\n      this.controls.forEach(function (control) {\n        control.setValue(build(new ctor(), control.value, props));\n      });\n    }\n  }], [{\n    key: \"Build\",\n    value: function Build(fb, controls, validator, asyncValidator) {\n      return new FormArray(fb, controls, validator, asyncValidator);\n    }\n  }, {\n    key: \"BuildWithType\",\n    value: function BuildWithType(ctor, fb) {\n      var controls = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n      var validator = arguments.length > 3 ? arguments[3] : undefined;\n      var asyncValidator = arguments.length > 4 ? arguments[4] : undefined;\n      var fa = new FormArray(fb, controls, validator, asyncValidator);\n      fa.ctor = ctor;\n      return fa;\n    }\n  }, {\n    key: \"BuildWithTypeAndValue\",\n    value: function BuildWithTypeAndValue(ctor, value, fb) {\n      var controls = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];\n      var validator = arguments.length > 4 ? arguments[4] : undefined;\n      var asyncValidator = arguments.length > 5 ? arguments[5] : undefined;\n      var fa = new FormArray(fb, controls, validator, asyncValidator);\n      fa.ctor = ctor;\n      fa.setValue(value);\n      return fa;\n    }\n  }, {\n    key: \"BuildWithValue\",\n    value: function BuildWithValue(value, fb) {\n      var controls = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n      var validator = arguments.length > 3 ? arguments[3] : undefined;\n      var asyncValidator = arguments.length > 4 ? arguments[4] : undefined;\n      var fa = new FormArray(fb, controls, validator, asyncValidator);\n      fa.setValue(value);\n      return fa;\n    }\n  }, {\n    key: \"GetValue\",\n    value: function GetValue(value, ctor) {\n      return toArray(value).map(function (x) {\n        return _getValue(build(ctor, x));\n      });\n    }\n  }]);\n\n  return FormArray;\n}(Ng2FormArray);","map":null,"metadata":{},"sourceType":"module"}