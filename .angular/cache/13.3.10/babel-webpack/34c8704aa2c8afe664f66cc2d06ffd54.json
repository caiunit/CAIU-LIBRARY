{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\dsalgado.contr\\\\source\\\\Workspaces\\\\CAIU-LIBRARY\\\\CAIU-LIBRARY\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\classCallCheck.js\";\nimport _createClass from \"C:\\\\Users\\\\dsalgado.contr\\\\source\\\\Workspaces\\\\CAIU-LIBRARY\\\\CAIU-LIBRARY\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\createClass.js\";\nimport * as signalR from '@Microsoft/signalr';\nimport { Store } from '@ngrx/store';\nimport { SOCKET_URL } from './hub.module';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/store\";\nexport var HubService = /*#__PURE__*/(function () {\n  var HubService = /*#__PURE__*/function () {\n    function HubService(store, url) {\n      _classCallCheck(this, HubService);\n\n      this.store = store;\n      this.startConnection(url);\n    }\n\n    _createClass(HubService, [{\n      key: \"startConnection\",\n      value: function startConnection(url) {\n        this.hubConnection = new signalR.HubConnectionBuilder().withUrl(url, {\n          skipNegotiation: true,\n          transport: signalR.HttpTransportType.WebSockets\n        }).build();\n        this.hubConnection.start();\n        return this.hubConnection;\n      }\n    }, {\n      key: \"addEffect\",\n      value: function addEffect(channel, action) {\n        var _this = this;\n\n        this.removeEffect(channel); // make sure no existing streams exist for this channel\n\n        this.hubConnection.on(channel, function (payload) {\n          _this.store.dispatch({\n            type: action,\n            payload: payload\n          });\n        });\n      }\n    }, {\n      key: \"removeEffect\",\n      value: function removeEffect(channel) {\n        this.removeListener(channel);\n      }\n    }, {\n      key: \"addListener\",\n      value: function addListener(functionName, func) {\n        this.hubConnection.on(functionName, function (data) {\n          return func(data);\n        });\n      }\n    }, {\n      key: \"removeListener\",\n      value: function removeListener(channel) {\n        this.hubConnection.off(channel);\n      }\n    }]);\n\n    return HubService;\n  }();\n\n  HubService.ɵfac = function HubService_Factory(t) {\n    return new (t || HubService)(i0.ɵɵinject(i1.Store), i0.ɵɵinject(SOCKET_URL));\n  };\n\n  HubService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: HubService,\n    factory: HubService.ɵfac,\n    providedIn: 'root'\n  });\n  return HubService;\n})();","map":null,"metadata":{},"sourceType":"module"}