{"ast":null,"code":"import _toConsumableArray from \"C:\\\\Users\\\\dsalgado.contr\\\\source\\\\Workspaces\\\\CAIU-LIBRARY\\\\CAIU-LIBRARY\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\toConsumableArray.js\";\nimport _classCallCheck from \"C:\\\\Users\\\\dsalgado.contr\\\\source\\\\Workspaces\\\\CAIU-LIBRARY\\\\CAIU-LIBRARY\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\classCallCheck.js\";\nimport _createClass from \"C:\\\\Users\\\\dsalgado.contr\\\\source\\\\Workspaces\\\\CAIU-LIBRARY\\\\CAIU-LIBRARY\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\createClass.js\";\nimport { compareNumbers } from './utils';\nexport var TreeItem = /*#__PURE__*/function () {\n  function TreeItem(item, parent) {\n    _classCallCheck(this, TreeItem);\n\n    this.item = item;\n    this.parent = parent;\n    this.id = 0;\n    this.order = 0;\n    this.parentId = 0;\n    this.treeId = 0;\n    this.index = 0; // overall order within the flattened tree\n  }\n\n  _createClass(TreeItem, [{\n    key: \"hasParent\",\n    get: function get() {\n      return this.parentId ? true : false;\n    }\n  }, {\n    key: \"sortOrder\",\n    get: function get() {\n      return this.parentId ? this.treeId + .1 * this.order : this.treeId;\n    }\n  }, {\n    key: \"treeOrder\",\n    get: function get() {\n      return this.parentId ? this.order : 0;\n    }\n  }], [{\n    key: \"Build\",\n    value: function Build(item) {\n      return {\n        item: item,\n        id: item['id'],\n        order: item['order'],\n        parentId: item['parentId']\n      };\n    }\n  }]);\n\n  return TreeItem;\n}();\nexport var Tree = /*#__PURE__*/function () {\n  function Tree(_treeItems, ctor) {\n    _classCallCheck(this, Tree);\n\n    this._treeItems = _treeItems;\n    this.ctor = ctor;\n    this._activeId = 0;\n    this._activeIndex = -1;\n  }\n\n  _createClass(Tree, [{\n    key: \"activeId\",\n    get: function get() {\n      return this._activeId;\n    },\n    set: function set(id) {\n      this._activeId = id;\n      this._activeIndex = this.getIndexById(id);\n    }\n  }, {\n    key: \"activeIndex\",\n    get: function get() {\n      return this._activeIndex;\n    },\n    set: function set(index) {\n      this._activeIndex = index;\n      this._activeId = this.getIdByIndex(index);\n    }\n  }, {\n    key: \"copy\",\n    get: function get() {\n      return Object.assign(new Tree(this._treeItems, this.ctor), this);\n    }\n  }, {\n    key: \"instance\",\n    get: function get() {\n      return new this.ctor() || {};\n    }\n  }, {\n    key: \"next\",\n    get: function get() {\n      return this.getNext(this.activeIndex);\n    }\n  }, {\n    key: \"nextId\",\n    get: function get() {\n      return this.next.id;\n    }\n  }, {\n    key: \"nextIndex\",\n    get: function get() {\n      return this.activeIndex + 1;\n    }\n  }, {\n    key: \"previous\",\n    get: function get() {\n      return this.getPrevious(this.activeIndex);\n    }\n  }, {\n    key: \"previousId\",\n    get: function get() {\n      return this.previous.id;\n    }\n  }, {\n    key: \"previousIndex\",\n    get: function get() {\n      return this.activeIndex - 1;\n    }\n  }, {\n    key: \"items\",\n    get: function get() {\n      return this._treeItems.map(function (x) {\n        return x.item;\n      });\n    }\n  }, {\n    key: \"treeItems\",\n    get: function get() {\n      return this._treeItems;\n    }\n  }, {\n    key: \"orderedItems\",\n    get: function get() {\n      return this.treeItems.sort(function (a, b) {\n        return compareNumbers(a.index, b.index);\n      });\n    }\n  }, {\n    key: \"subtrees\",\n    get: function get() {\n      var _this = this;\n\n      var trees = this.treeItems.reduce(function (acc, item) {\n        var treeId = item.treeId;\n        var subitems = acc[treeId] || [];\n        acc[treeId] = [].concat(_toConsumableArray(subitems), [item]);\n        return acc;\n      }, {});\n      return Object.keys(trees).map(function (key) {\n        return Tree.Build(trees[key], _this.ctor);\n      });\n    }\n  }, {\n    key: \"subtreeItems\",\n    get: function get() {\n      return this.subtrees.map(function (tree) {\n        return tree.treeItems.sort(function (a, b) {\n          return compareNumbers(a.index, b.index);\n        });\n      });\n    }\n  }, {\n    key: \"getIdByIndex\",\n    value: function getIdByIndex(index) {\n      var item = this.getItemByIndex(index);\n      return item.id;\n    }\n  }, {\n    key: \"getIndexById\",\n    value: function getIndexById(id) {\n      return this.getItemById(id).index;\n    }\n  }, {\n    key: \"getItemById\",\n    value: function getItemById(id) {\n      return this.treeItems.find(function (item) {\n        return item.id === id;\n      }) || new TreeItem(this.instance);\n    }\n  }, {\n    key: \"getItemByIndex\",\n    value: function getItemByIndex(index) {\n      return this.treeItems.find(function (item) {\n        return item.index === index;\n      }) || new TreeItem(this.instance);\n    }\n  }, {\n    key: \"getNext\",\n    value: function getNext(index) {\n      return this.getItemByIndex(index + 1);\n    }\n  }, {\n    key: \"getNextId\",\n    value: function getNextId(index) {\n      return this.getNext(index).id;\n    }\n  }, {\n    key: \"getPrevious\",\n    value: function getPrevious(index) {\n      return this.getItemByIndex(index - 1);\n    }\n  }, {\n    key: \"getPreviousId\",\n    value: function getPreviousId(index) {\n      return this.getPrevious(index).id;\n    }\n  }], [{\n    key: \"FindParent\",\n    value: function FindParent(items, item) {\n      return items.find(function (x) {\n        return x.id === item.parentId;\n      }) || new TreeItem({});\n    }\n  }, {\n    key: \"FindParentOrder\",\n    value: function FindParentOrder(items, item) {\n      var parent = Tree.FindParent(items, item);\n      return parent.order;\n    }\n  }, {\n    key: \"Build\",\n    value: function Build(items, ctor) {\n      var treeItems = items.reduce(function (acc, item) {\n        item.treeId = item.parentId ? Tree.FindParentOrder(items, item) : item.order;\n        var treeItem = Object.assign(new TreeItem({}), item);\n        return [].concat(_toConsumableArray(acc), [treeItem]);\n      }, []);\n      var orderedItems = items.sort(function (a, b) {\n        return compareNumbers(a.sortOrder, b.sortOrder);\n      }).reduce(function (acc, treeItem, index) {\n        var item = treeItem.item;\n        var parent = treeItem.parent;\n        return [].concat(_toConsumableArray(acc), [Object.assign(new TreeItem(item, parent), treeItem, {\n          index: index\n        })]);\n      }, []);\n      return new Tree(orderedItems, ctor);\n    }\n  }]);\n\n  return Tree;\n}();","map":null,"metadata":{},"sourceType":"module"}