{"version":3,"file":"router.service.d.ts","sources":["router.service.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { EventEmitter } from '@angular/core';\r\nimport { Router, ActivatedRoute, NavigationCancel, NavigationEnd, NavigationError, NavigationStart, RoutesRecognized, Params, Data, NavigationExtras } from '@angular/router';\r\nimport { Store } from '@ngrx/store';\r\nimport { Observable } from 'rxjs';\r\nexport declare class RouterService {\r\n    private _router;\r\n    private _route;\r\n    private store;\r\n    navigationCancel: EventEmitter<NavigationCancel>;\r\n    navigationEnd: EventEmitter<NavigationEnd>;\r\n    navigationError: EventEmitter<NavigationError>;\r\n    navigationStart: EventEmitter<NavigationStart>;\r\n    routesRecognized: EventEmitter<RoutesRecognized>;\r\n    constructor(_router: Router, _route: ActivatedRoute, store: Store<any>);\r\n    onNavigationCancel(e: NavigationCancel): void;\r\n    onNavigationEnd(e: NavigationEnd): void;\r\n    onNavigationError(e: NavigationError): void;\r\n    onNavigationStart(e: NavigationStart): void;\r\n    onRoutesRecognized(e: RoutesRecognized): void;\r\n    readonly activatedRoute: ActivatedRoute;\r\n    readonly routeData$: Observable<Data>;\r\n    readonly routeParams$: Observable<Params>;\r\n    readonly router: Router;\r\n    readonly url$: Observable<string>;\r\n    navigate(commands: any[], extras?: NavigationExtras): Observable<boolean>;\r\n    navigateByUrl(url: string, extras?: NavigationExtras): Observable<boolean>;\r\n}\r\n"]}