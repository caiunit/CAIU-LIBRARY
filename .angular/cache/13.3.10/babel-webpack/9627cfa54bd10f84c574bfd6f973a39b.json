{"ast":null,"code":"import { BaseEntity } from './base-entity'; // export const ActionCreator = (actionType?: any | any[]) => {\n//     return (target: any, propertySignature: string) => {\n//         const method = target[propertySignature];\n//         const decoratedMethod = function () {\n//             const $this = this;\n//             const action = method.apply($this, arguments);\n//             action.actionType = actionType;\n//             return action;\n//         };\n//         target[propertySignature] = decoratedMethod;\n//         return target;\n//     };\n// };\n\nexport var ActionType = function ActionType() {\n  return function (target, propertySignature) {\n    return target;\n  };\n};\n/**\r\n * Class Decorator Factory\r\n * Decorates a class.\r\n */\n\nexport var Class = function Class(metadata) {\n  var classDecorator = function classDecorator(target) {\n    return target;\n  };\n\n  return classDecorator;\n};\nexport var Command = function Command() {\n  return function (target, propertySignature) {\n    return target;\n  };\n};\nexport var Dispatcher = function Dispatcher() {\n  return function (target, propertySignature) {\n    return target;\n  };\n};\n/**\r\n * Decorates a class with properties from BaseEntity\r\n */\n\nexport var Entity = function Entity(metadata) {\n  function classDecorator(target) {\n    var ctor = function ctor() {\n      Object.assign(this, new BaseEntity(), {\n        metadata: metadata || {}\n      });\n    };\n\n    ctor.prototype = Object.create(target.prototype);\n    ctor.prototype.constructor = target;\n    return ctor;\n  }\n\n  ;\n  return classDecorator;\n};\nexport var EventHandler = function EventHandler() {\n  return function (target, propertySignature) {\n    return target;\n  };\n};\nexport var LifecycleHook = function LifecycleHook() {\n  return function (target, propertySignature) {\n    return target;\n  };\n};\n/**\r\n * Method Decorator Factory\r\n * Decorates a method.\r\n */\n\nexport var Method = function Method(metadata) {\n  var methodDecorator = function methodDecorator(target, propertySignature, descriptor) {\n    return target;\n  };\n\n  return methodDecorator;\n};\n/**\r\n * Parameter Decorator Factory\r\n * Decorates a parameter.\r\n */\n\nexport var Parameter = function Parameter(metadata) {\n  var parameterDecorator = function parameterDecorator(target, propertySignature, parameterIndex) {\n    return target;\n  };\n\n  return parameterDecorator;\n};\n/**\r\n * Property Decorator Factory\r\n * Decorates a Property.\r\n */\n\nexport var Property = function Property(metadata) {\n  var propertyDecorator = function propertyDecorator(target, propertySignature) {\n    if (!target.metadata) {\n      target.metadata = {};\n    }\n\n    target.metadata[propertySignature] = Object.assign(metadata, {\n      propertyName: propertySignature\n    });\n    return target;\n  };\n\n  return propertyDecorator;\n};\n/**\r\n * Static Method Decorator Factory\r\n * Decorates a static method.\r\n */\n\nexport var StaticMethod = function StaticMethod(metadata) {\n  var staticMethodDecorator = function staticMethodDecorator(target, propertySignature) {\n    return target;\n  };\n\n  return staticMethodDecorator;\n};\n/**\r\n *  Static Property Decorator Factory\r\n * Decorates a static property.\r\n */\n\nexport var StaticProperty = function StaticProperty(metadata) {\n  var staticPropertyDecorator = function staticPropertyDecorator(target, propertySignature) {\n    return target;\n  };\n\n  return staticPropertyDecorator;\n};","map":null,"metadata":{},"sourceType":"module"}