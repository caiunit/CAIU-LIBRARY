{"ast":null,"code":"import _toConsumableArray from \"C:\\\\Users\\\\dsalgado.contr\\\\source\\\\Workspaces\\\\CAIU-LIBRARY\\\\CAIU-LIBRARY\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\toConsumableArray.js\";\nimport _inherits from \"C:\\\\Users\\\\dsalgado.contr\\\\source\\\\Workspaces\\\\CAIU-LIBRARY\\\\CAIU-LIBRARY\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\inherits.js\";\nimport _createSuper from \"C:\\\\Users\\\\dsalgado.contr\\\\source\\\\Workspaces\\\\CAIU-LIBRARY\\\\CAIU-LIBRARY\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\createSuper.js\";\nimport _createClass from \"C:\\\\Users\\\\dsalgado.contr\\\\source\\\\Workspaces\\\\CAIU-LIBRARY\\\\CAIU-LIBRARY\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\createClass.js\";\nimport _classCallCheck from \"C:\\\\Users\\\\dsalgado.contr\\\\source\\\\Workspaces\\\\CAIU-LIBRARY\\\\CAIU-LIBRARY\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\classCallCheck.js\";\n\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, defineProperty = Object.defineProperty || function (obj, key, desc) { obj[key] = desc.value; }, $Symbol = \"function\" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || \"@@iterator\", asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\", toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, \"\"); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return defineProperty(generator, \"_invoke\", { value: makeInvokeMethod(innerFn, self, context) }), generator; } function tryCatch(fn, obj, arg) { try { return { type: \"normal\", arg: fn.call(obj, arg) }; } catch (err) { return { type: \"throw\", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { [\"next\", \"throw\", \"return\"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if (\"throw\" !== record.type) { var result = record.arg, value = result.value; return value && \"object\" == typeof value && hasOwn.call(value, \"__await\") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke(\"next\", value, resolve, reject); }, function (err) { invoke(\"throw\", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke(\"throw\", error, resolve, reject); }); } reject(record.arg); } var previousPromise; defineProperty(this, \"_invoke\", { value: function value(method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(innerFn, self, context) { var state = \"suspendedStart\"; return function (method, arg) { if (\"executing\" === state) throw new Error(\"Generator is already running\"); if (\"completed\" === state) { if (\"throw\" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if (\"next\" === context.method) context.sent = context._sent = context.arg;else if (\"throw\" === context.method) { if (\"suspendedStart\" === state) throw state = \"completed\", context.arg; context.dispatchException(context.arg); } else \"return\" === context.method && context.abrupt(\"return\", context.arg); state = \"executing\"; var record = tryCatch(innerFn, self, context); if (\"normal\" === record.type) { if (state = context.done ? \"completed\" : \"suspendedYield\", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } \"throw\" === record.type && (state = \"completed\", context.method = \"throw\", context.arg = record.arg); } }; } function maybeInvokeDelegate(delegate, context) { var methodName = context.method, method = delegate.iterator[methodName]; if (undefined === method) return context.delegate = null, \"throw\" === methodName && delegate.iterator.return && (context.method = \"return\", context.arg = undefined, maybeInvokeDelegate(delegate, context), \"throw\" === context.method) || \"return\" !== methodName && (context.method = \"throw\", context.arg = new TypeError(\"The iterator does not provide a '\" + methodName + \"' method\")), ContinueSentinel; var record = tryCatch(method, delegate.iterator, context.arg); if (\"throw\" === record.type) return context.method = \"throw\", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, \"return\" !== context.method && (context.method = \"next\", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = \"throw\", context.arg = new TypeError(\"iterator result is not an object\"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = \"normal\", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: \"root\" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if (\"function\" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, \"constructor\", { value: GeneratorFunctionPrototype, configurable: !0 }), defineProperty(GeneratorFunctionPrototype, \"constructor\", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"), exports.isGeneratorFunction = function (genFun) { var ctor = \"function\" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || \"GeneratorFunction\" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, \"GeneratorFunction\")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, \"Generator\"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, \"toString\", function () { return \"[object Generator]\"; }), exports.keys = function (val) { var object = Object(val), keys = []; for (var key in object) keys.push(key); return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) \"t\" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if (\"throw\" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = \"throw\", record.arg = exception, context.next = loc, caught && (context.method = \"next\", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if (\"root\" === entry.tryLoc) return handle(\"end\"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, \"catchLoc\"), hasFinally = hasOwn.call(entry, \"finallyLoc\"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error(\"try statement without catch or finally\"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && (\"break\" === type || \"continue\" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = \"next\", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if (\"throw\" === record.type) throw record.arg; return \"break\" === record.type || \"continue\" === record.type ? this.next = record.arg : \"return\" === record.type ? (this.rval = this.arg = record.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if (\"throw\" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, \"next\" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { forwardRef } from '@angular/core';\nimport { FormGroup, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { DomSanitizer } from '@angular/platform-browser';\nimport { Store } from '@ngrx/store';\nimport { buildControlFromModel } from '../../../forms/utils';\nimport { SmartComponent } from '../../../shared/component';\nimport { build, compareNumbers, equals, getValue, inArray, toArray, truthy } from '../../../shared/utils';\nimport { FileUpload } from '../file-upload.model';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/store\";\nimport * as i2 from \"@angular/platform-browser\";\nexport var FILE_ACCESSOR = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(function () {\n    return UploaderComponent;\n  }),\n  multi: true\n};\n\nvar FileUploads = /*#__PURE__*/_createClass(function FileUploads() {\n  _classCallCheck(this, FileUploads);\n\n  this.uploads = [];\n});\n\nfunction buildFromFile(file) {\n  return build(FileUpload, {\n    name: file.fileName,\n    size: file.fileSize,\n    type: file.mimeType,\n    src: getSrcFromFileName(file.fileName),\n    order: file.order\n  });\n}\n\nfunction getSrcFromFileName(fileName) {\n  return fileName.includes('gun.png') ? fileName : \"/files/\".concat(fileName);\n}\n\nfunction mapToUrl(path) {\n  console.log(path);\n  var s = Array.isArray(path) ? path.map(function (x) {\n    return mapToUrl(x);\n  }) : inArray(['assets/gun.png', 'assets/ar.png', 'assets/shotgun.png'], path) ? \"/\".concat(path) : \"/files/\".concat(path);\n  console.log(s);\n  return s;\n}\n\nexport var UploaderComponent = /*#__PURE__*/(function () {\n  var UploaderComponent = /*#__PURE__*/function (_SmartComponent) {\n    _inherits(UploaderComponent, _SmartComponent);\n\n    var _super = _createSuper(UploaderComponent);\n\n    function UploaderComponent(store, sanitizer) {\n      var _this;\n\n      _classCallCheck(this, UploaderComponent);\n\n      _this = _super.call(this, store);\n      _this.store = store;\n      _this.sanitizer = sanitizer;\n      _this.apiBaseUrl = '';\n      _this.authToken = '';\n      _this._uploads = [];\n      _this.fg = buildControlFromModel(new FileUploads()); // this.addSubscription(authTokenSelector(store).subscribe(x => {\n      //   this.authToken = x;\n      // }));\n\n      return _this;\n    }\n\n    _createClass(UploaderComponent, [{\n      key: \"uploads\",\n      get: function get() {\n        return this._uploads;\n      },\n      set: function set(value) {\n        if (!equals(value.map(function (x) {\n          return x.src;\n        }), this._uploads.map(function (x) {\n          return x.src;\n        }))) {\n          this._uploads = value;\n          this.fg.setValue(getValue(build(FileUploads, {\n            uploads: value\n          })));\n          this.onChange(toArray(value).sort(function (a, b) {\n            return compareNumbers(a.order, b.order);\n          }).map(function (x) {\n            return x.name;\n          }));\n          console.dir(this.value);\n        }\n      }\n    }, {\n      key: \"value\",\n      get: function get() {\n        return this._value;\n      },\n      set: function set(value) {\n        if (truthy(value) && !equals(value, this._value)) {\n          // fetch file from server\n          if (typeof value === 'string') {\n            this.getFile(mapToUrl(value));\n          } else if (Array.isArray(value) && value.length > 0) {\n            this.getFiles(mapToUrl(value));\n          }\n        }\n\n        this._value = value;\n      }\n    }, {\n      key: \"registerOnChange\",\n      value: function registerOnChange(fn) {\n        this.onModelChange = fn;\n      }\n    }, {\n      key: \"registerOnTouched\",\n      value: function registerOnTouched(fn) {\n        this.onTouch = fn;\n      }\n    }, {\n      key: \"writeValue\",\n      value: function writeValue(value) {\n        this.value = value;\n      }\n    }, {\n      key: \"onChange\",\n      value: function onChange(value) {\n        this._value = value;\n\n        if (typeof this.onModelChange === 'function') {\n          this.onModelChange(value);\n        }\n      }\n    }, {\n      key: \"onReorderUploads\",\n      value: function onReorderUploads(e) {\n        this.uploads = e;\n      }\n    }, {\n      key: \"onUpload\",\n      value: function onUpload(e) {\n        console.dir(e);\n      }\n    }, {\n      key: \"ngOnInit\",\n      value: function ngOnInit() {\n        var _this2 = this;\n\n        this.addSubscription(this.fg.valueChanges.subscribe(function (x) {\n          if (!equals(_this2.uploads.map(function (y) {\n            return y.src;\n          }), x.uploads.map(function (y) {\n            return y.src;\n          }))) {\n            if (x.uploads.filter(function (y) {\n              return y.loading;\n            }).length === 0) {\n              var uploads = x.uploads.filter(function (y) {\n                return !inArray(_this2.uploads.map(function (z) {\n                  return z.name;\n                }), y.name) && !y.loading && !y.name.includes('gun.png');\n              });\n              console.log('\\n\\n', 'FORM CHANGE');\n              console.dir(x.uploads);\n\n              if (uploads.length > 0) {\n                console.dir(uploads);\n                uploads.forEach(function (upload) {\n                  console.log(upload.name);\n\n                  if (upload.src) {\n                    _this2.saveFile(upload);\n                  }\n                });\n              } else {\n                var reordering = x.uploads.length > 1 ? x.uploads.filter(function (y) {\n                  return !y.name.includes('gun.png');\n                }) : x.uploads;\n                console.log('NO NEW UPLOADS!'); // console.dir(reordering);\n                // this.uploads = reordering;\n\n                if (x.uploads.length > 1) {// this.uploads = x.uploads;\n                }\n              }\n            }\n          }\n        }));\n      }\n    }, {\n      key: \"getFile\",\n      value: function getFile(url) {\n        return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n          var _this3 = this;\n\n          return _regeneratorRuntime().wrap(function _callee$(_context) {\n            while (1) switch (_context.prev = _context.next) {\n              case 0:\n                console.log(url);\n                return _context.abrupt(\"return\", fetch(url).then(function (response) {\n                  return response.blob();\n                }).then(function (blob) {\n                  var reader = new FileReader();\n                  reader.readAsDataURL(blob);\n\n                  reader.onloadend = function () {\n                    // const src = this.sanitizer.bypassSecurityTrustUrl(`data:image/png;base64,${reader.result}`);\n                    // const src = `data:image/png;base64,${reader.result}`;\n                    var src = \"\".concat(reader.result);\n                    _this3.uploads = [].concat(_toConsumableArray(_this3.uploads), [build(FileUpload, {\n                      src: src,\n                      size: blob.size,\n                      type: blob.type,\n                      name: url.split('/').pop()\n                    })]);\n                  };\n                }).catch(function (error) {\n                  return error;\n                }));\n\n              case 2:\n              case \"end\":\n                return _context.stop();\n            }\n          }, _callee);\n        }));\n      }\n    }, {\n      key: \"getFiles\",\n      value: function getFiles(urls) {\n        return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n          var _this4 = this;\n\n          return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n            while (1) switch (_context2.prev = _context2.next) {\n              case 0:\n                urls.forEach(function (url) {\n                  _this4.getFile(url);\n                });\n\n              case 1:\n              case \"end\":\n                return _context2.stop();\n            }\n          }, _callee2);\n        }));\n      }\n    }, {\n      key: \"saveFile\",\n      value: function saveFile(upload) {\n        var _this5 = this;\n\n        (function () {\n          return __awaiter(_this5, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n            var _this6 = this;\n\n            var body, headers, response;\n            return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n              while (1) switch (_context3.prev = _context3.next) {\n                case 0:\n                  body = JSON.stringify(upload.file);\n                  headers = {\n                    'Accept': 'application/json',\n                    'Content-Type': 'application/json'\n                  };\n\n                  if (this.authToken) {\n                    headers['Authorization'] = \"Bearer \".concat(this.authToken);\n                  }\n\n                  response = fetch(\"\".concat(this.apiBaseUrl, \"/files\"), {\n                    method: 'POST',\n                    headers: headers,\n                    body: body\n                  });\n                  _context3.next = 6;\n                  return response;\n\n                case 6:\n                  _context3.next = 8;\n                  return _context3.sent.json().then(function (data) {\n                    console.dir(data);\n                    var upload = buildFromFile(data);\n                    console.dir(upload);\n                    _this6.uploads = [].concat(_toConsumableArray(_this6.uploads.filter(function (x) {\n                      return !x.name.includes('gun.png');\n                    })), [upload]);\n                    console.dir(_this6.uploads);\n                    console.log(_this6.value);\n                    return upload;\n                  }).catch(function (error) {\n                    console.error(error);\n                  });\n\n                case 8:\n                case \"end\":\n                  return _context3.stop();\n              }\n            }, _callee3, this);\n          }));\n        })();\n      }\n    }]);\n\n    return UploaderComponent;\n  }(SmartComponent);\n\n  UploaderComponent.ɵfac = function UploaderComponent_Factory(t) {\n    return new (t || UploaderComponent)(i0.ɵɵdirectiveInject(i1.Store), i0.ɵɵdirectiveInject(i2.DomSanitizer));\n  };\n\n  UploaderComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: UploaderComponent,\n    selectors: [[\"iu-uploader\"]],\n    inputs: {\n      apiBaseUrl: \"apiBaseUrl\"\n    },\n    features: [i0.ɵɵProvidersFeature([FILE_ACCESSOR]), i0.ɵɵInheritDefinitionFeature],\n    decls: 0,\n    vars: 0,\n    template: function UploaderComponent_Template(rf, ctx) {},\n    styles: [\"form[_ngcontent-%COMP%]{width:100%}form[_ngcontent-%COMP%]   iu-file-control[_ngcontent-%COMP%]{width:100%;background:#fff}\"]\n  });\n  return UploaderComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}