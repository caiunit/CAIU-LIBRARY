{"version":3,"file":"http.service.d.ts","sources":["http.service.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { HttpOptions } from './http.models';\r\nimport { QueryModel } from '../shared/models';\r\nexport declare class HttpService {\r\n    http: HttpClient;\r\n    private baseUrl$;\r\n    private authToken$;\r\n    private _authToken;\r\n    private _baseUrl;\r\n    private authTokenChanges;\r\n    private baseUrlChanges;\r\n    headers: {};\r\n    logEvents: boolean;\r\n    useDefaultHeaders: boolean;\r\n    constructor(http: HttpClient, baseUrl$: Observable<string>, authToken$: Observable<string>);\r\n    authToken: string;\r\n    baseUrl: string;\r\n    readonly defaultHeaders: HttpHeaders;\r\n    readonly requestHeaders: HttpHeaders;\r\n    appendHeaders(headers?: {}): HttpHeaders;\r\n    /**\r\n     * Make a DELETE request.\r\n     * @param relativePath\r\n     * @param headers\r\n     * @param options\r\n     */\r\n    delete(relativePath: string, headers?: {}, options?: HttpOptions): Observable<any>;\r\n    /**\r\n     * Make a GET request.\r\n     * @param relativePath\r\n     * @param headers\r\n     * @param options\r\n     */\r\n    get(relativePath: string, headers?: {}, options?: HttpOptions): Observable<any>;\r\n    /**\r\n     * Make an autocomplete GET request.\r\n     * @param relativePath\r\n     * @param headers\r\n     * @param options\r\n     */\r\n    autocomplete(relativePath: string, query: QueryModel<any>, headers?: {}, options?: HttpOptions): Observable<any>;\r\n    /**\r\n     * Make a POST request.\r\n     * @param relativePath\r\n     * @param body\r\n     * @param headers\r\n     * @param options\r\n     */\r\n    post(relativePath: string, body: any, headers?: {}, options?: HttpOptions): Observable<any>;\r\n    /**\r\n     * Make a POST request with form url-encoded content type.\r\n     * @param relativePath\r\n     * @param body\r\n     * @param headers\r\n     * @param options\r\n     */\r\n    postFormUrlEncoded(relativePath: string, body: any, headers?: {}, options?: HttpOptions): Observable<any>;\r\n    /**\r\n     * Make a PUT request.\r\n     * @param relativePath\r\n     * @param body\r\n     * @param headers\r\n     * @param options\r\n     */\r\n    put(relativePath: string, body: any, headers?: {}, options?: HttpOptions): Observable<any>;\r\n    /**\r\n     * This method will be used to format URLs for all cross-origin requests.\r\n     */\r\n    formatUrl(path: string): string;\r\n    /**\r\n     * Use this method when a promise is preferred over an observable.\r\n     */\r\n    getPromise(url: string): Promise<any>;\r\n    private onError(error);\r\n    private onComplete(method, url);\r\n}\r\n"]}