{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\dsalgado.contr\\\\source\\\\Workspaces\\\\CAIU-LIBRARY\\\\CAIU-LIBRARY\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\classCallCheck.js\";\nimport _createClass from \"C:\\\\Users\\\\dsalgado.contr\\\\source\\\\Workspaces\\\\CAIU-LIBRARY\\\\CAIU-LIBRARY\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\createClass.js\";\nimport { Store } from '@ngrx/store';\nimport { StorageActions } from './storage.actions';\nimport { ActionStore } from './storage.models';\nimport { STORE_KEY } from './storage.module';\nimport { build, inArray, filterState } from '../shared/utils';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/store\";\nexport var StorageService = /*#__PURE__*/(function () {\n  var StorageService = /*#__PURE__*/function () {\n    function StorageService(store, storeKey) {\n      _classCallCheck(this, StorageService);\n\n      this.store = store;\n      this.storeKey = storeKey;\n      this.localStorageActions = [];\n      this.sessionStorageActions = [];\n\n      this.localStorageMapper = function (s) {\n        return s;\n      };\n\n      this.sessionStorageMapper = function (s) {\n        return s;\n      };\n    }\n\n    _createClass(StorageService, [{\n      key: \"localStore\",\n      get: function get() {\n        return localStorage.getItem(this.storeKey);\n      }\n    }, {\n      key: \"sessionStore\",\n      get: function get() {\n        return sessionStorage.getItem(this.storeKey);\n      }\n    }, {\n      key: \"storage\",\n      get: function get() {\n        var localStore = this.localStore;\n        var sessionStore = this.sessionStore;\n        return build(Storage, Object.assign({}, localStore, sessionStore), {\n          localStore: localStore,\n          sessionStore: sessionStore\n        });\n      }\n      /**\r\n       * Initialize the use of local storage and/or session storage\r\n       * @param localStorageMapper Mapper function for mapping state to local store\r\n       * @param sessionStorageMapper Mapper function for mapping state to session store\r\n       * @param localStorageActions Actions after which to save to local storage\r\n       * @param sessionStorageActions Actions after which to save to session storage\r\n       */\n\n    }, {\n      key: \"init\",\n      value: function init() {\n        var localStorageMapper = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : function (s) {\n          return s;\n        };\n        var sessionStorageMapper = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : function (s) {\n          return s;\n        };\n        var localStorageActions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n        var sessionStorageActions = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];\n        var localStore = this.initLocalStore(localStorageMapper, localStorageActions);\n        var sessionStore = this.initSessionStore(sessionStorageMapper, sessionStorageActions);\n        this.store.dispatch(StorageActions.initStore(localStore, sessionStore));\n      }\n      /**\r\n       * Initialize the use of local storage\r\n       * @param localStorageMapper Mapper function for mapping state to local store\r\n       * @param localStorageActions Actions after which to save to local storage\r\n       */\n\n    }, {\n      key: \"initLocalStore\",\n      value: function initLocalStore() {\n        var localStorageMapper = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : function (s) {\n          return s;\n        };\n        var localStorageActions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n        this.localStorageMapper = localStorageMapper;\n        this.localStorageActions = localStorageActions;\n        var ls = this.localStore;\n        var localStore = ls ? JSON.parse(ls) : {};\n        return localStore;\n      }\n      /**\r\n       * Initialize the use of session storage\r\n       * @param sessionStorageMapper Mapper function for mapping state to session store\r\n       * @param sessionStorageActions Actions after which to save to session storage\r\n       */\n\n    }, {\n      key: \"initSessionStore\",\n      value: function initSessionStore() {\n        var sessionStorageMapper = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : function (s) {\n          return s;\n        };\n        var sessionStorageActions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n        this.sessionStorageMapper = sessionStorageMapper;\n        this.sessionStorageActions = sessionStorageActions;\n        var ss = this.sessionStore;\n        var sessionStore = ss ? JSON.parse(ss) : {};\n        return sessionStorage;\n      }\n    }, {\n      key: \"inLocalStorage\",\n      value: function inLocalStorage(actionType) {\n        return inArray(this.localStorageActions, actionType);\n      }\n    }, {\n      key: \"inSessionStorage\",\n      value: function inSessionStorage(actionType) {\n        return inArray(this.sessionStorageActions, actionType);\n      }\n      /**\r\n       * Store state to local storage.\r\n       */\n\n    }, {\n      key: \"storeLocal\",\n      value: function storeLocal(state, action) {\n        try {\n          // const filteredState = new ActionStore(action, this.filterState(Object.assign({}, state)));\n          var filteredState = Object.assign(filterState(new ActionStore(action)), filterState(Object.assign({}, this.localStorageMapper(state))));\n          var serializedState = JSON.stringify(filteredState);\n          localStorage.removeItem(this.storeKey);\n          localStorage.setItem(this.storeKey, serializedState);\n        } catch (err) {\n          console.error(\"ERROR SAVING LOCAL STATE!\\nAction:\\t\".concat(action.actionType, \"\\n\"), err);\n        }\n      }\n      /**\r\n       * Store state to session storage.\r\n       */\n\n    }, {\n      key: \"storeSession\",\n      value: function storeSession(state, action) {\n        try {\n          // const filteredState = new ActionStore(action, this.filterState(Object.assign({}, state)));\n          // const filteredState = this.filterState(Object.assign({}, state));\n          var filteredState = Object.assign(filterState(new ActionStore(action)), filterState(Object.assign({}, this.sessionStorageMapper(state))));\n          var serializedState = JSON.stringify(filteredState);\n          localStorage.removeItem(this.storeKey);\n          sessionStorage.setItem(this.storeKey, serializedState);\n        } catch (err) {\n          console.error(\"ERROR SAVING SESSION STATE!\\nAction:\\t\".concat(action.actionType, \"\\n\"), err);\n        }\n      }\n    }]);\n\n    return StorageService;\n  }();\n\n  StorageService.ɵfac = function StorageService_Factory(t) {\n    return new (t || StorageService)(i0.ɵɵinject(i1.Store), i0.ɵɵinject(STORE_KEY));\n  };\n\n  StorageService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: StorageService,\n    factory: StorageService.ɵfac,\n    providedIn: 'root'\n  });\n  return StorageService;\n})();","map":null,"metadata":{},"sourceType":"module"}