{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\dsalgado.contr\\\\source\\\\Workspaces\\\\CAIU-LIBRARY\\\\CAIU-LIBRARY\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\classCallCheck.js\";\nimport _createClass from \"C:\\\\Users\\\\dsalgado.contr\\\\source\\\\Workspaces\\\\CAIU-LIBRARY\\\\CAIU-LIBRARY\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\createClass.js\";\nimport { Store } from '@ngrx/store';\nimport { of } from 'rxjs';\nimport { combineLatest, skip, take as _take } from 'rxjs/operators';\nimport { EventActions } from './events.actions';\nimport { eventValueSelector } from './events.selectors';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/store\";\nexport var EventsService = /*#__PURE__*/(function () {\n  var EventsService = /*#__PURE__*/function () {\n    function EventsService(store) {\n      _classCallCheck(this, EventsService);\n\n      this.store = store;\n      this.eventIndex = 0;\n      this.events = [];\n    }\n\n    _createClass(EventsService, [{\n      key: \"eventKey\",\n      get: function get() {\n        this.eventIndex++;\n        return \"event-\".concat(this.eventIndex);\n      }\n    }, {\n      key: \"addEvent\",\n      value: function addEvent(actionType, handler) {\n        var f = handler ? handler : function (action) {\n          return true;\n        };\n        var actionWithKey = EventActions.addEvent(actionType, f, false);\n        this.store.dispatch(actionWithKey);\n        return actionWithKey.key;\n      }\n    }, {\n      key: \"dispatch\",\n      value: function dispatch(action, handler) {\n        return this.dispatchHttpAction(action, handler);\n      }\n    }, {\n      key: \"dispatchHttpAction\",\n      value: function dispatchHttpAction(action, handler) {\n        var successAction = action.payload.onSuccess;\n        var errorAction = typeof action.payload.onError === 'string' ? action.payload.onError : null;\n        var success = this.takeOne(successAction, handler);\n        var obs = errorAction ? success.pipe(combineLatest(this.takeOne(errorAction, handler), function (x, y) {\n          return true;\n        })) : success;\n        this.store.dispatch(action);\n        return obs;\n      }\n    }, {\n      key: \"removeEvent\",\n      value: function removeEvent(eventKey) {\n        this.store.dispatch(EventActions.removeEvent(eventKey));\n      }\n    }, {\n      key: \"subscribe\",\n      value: function subscribe(action, handler) {\n        return this.take(1, action).subscribe(handler);\n      }\n    }, {\n      key: \"take\",\n      value: function take() {\n        var n = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n        var actionType = arguments.length > 1 ? arguments[1] : undefined;\n        var handler = arguments.length > 2 ? arguments[2] : undefined;\n        var key = this.addEvent(actionType, handler);\n        return eventValueSelector(this.store, key).pipe(skip(1), _take(n));\n      }\n    }, {\n      key: \"takeFrom\",\n      value: function takeFrom() {\n        var _this = this;\n\n        var n = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n        var actions = arguments.length > 1 ? arguments[1] : undefined;\n        var handler = arguments.length > 2 ? arguments[2] : undefined;\n        var keys = actions.map(function (action) {\n          return _this.addEvent(action, handler);\n        });\n        return keys.map(function (key) {\n          return eventValueSelector(_this.store, key);\n        }).reduce(function (acc, obs) {\n          return acc.pipe(combineLatest(obs, function (x, y) {\n            return true;\n          }));\n        }, of(false)).pipe(skip(1), _take(n));\n      }\n    }, {\n      key: \"takeOne\",\n      value: function takeOne(actionType, handler) {\n        return this.take(1, actionType, handler);\n      }\n    }]);\n\n    return EventsService;\n  }();\n\n  EventsService.ɵfac = function EventsService_Factory(t) {\n    return new (t || EventsService)(i0.ɵɵinject(i1.Store));\n  };\n\n  EventsService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: EventsService,\n    factory: EventsService.ɵfac,\n    providedIn: 'root'\n  });\n  return EventsService;\n})();","map":null,"metadata":{},"sourceType":"module"}