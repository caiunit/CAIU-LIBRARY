{"ast":null,"code":"import _toConsumableArray from \"C:\\\\Users\\\\dsalgado.contr\\\\source\\\\Workspaces\\\\CAIU-LIBRARY\\\\CAIU-LIBRARY\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\toConsumableArray.js\";\nimport _classCallCheck from \"C:\\\\Users\\\\dsalgado.contr\\\\source\\\\Workspaces\\\\CAIU-LIBRARY\\\\CAIU-LIBRARY\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\classCallCheck.js\";\nimport _createClass from \"C:\\\\Users\\\\dsalgado.contr\\\\source\\\\Workspaces\\\\CAIU-LIBRARY\\\\CAIU-LIBRARY\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\createClass.js\";\nimport { Tile } from '../tile/tile.model';\nimport { Image, Dimensions } from '../../shared/models';\nimport { integerArray, positiveIntegerArray, build, inArray } from '../../shared/utils';\nexport var Collage = /*#__PURE__*/function () {\n  function Collage() {\n    _classCallCheck(this, Collage);\n\n    this.canvasHeight = 0;\n    this.canvasWidth = 0;\n    this.cellHeight = 0;\n    this.cellWidth = 0;\n    this.maxColumns = 4;\n    this.maxRows = 4;\n    this.tileDimensions = [];\n    this.totalColumns = 0;\n    this.totalRows = 0;\n    this._images = [];\n    this._tiles = [];\n  }\n  /**\r\n   * Build new collage instance with given parameters.\r\n   * @param images\r\n   * @param canvasHeight\r\n   * @param canvasWidth\r\n   * @param totalRows\r\n   * @param totalColumns\r\n   * @param maxRows\r\n   * @param maxColumns\r\n   */\n\n\n  _createClass(Collage, [{\n    key: \"cells\",\n    get: function get() {\n      return this._cells || this.emptyCells;\n    },\n    set: function set(value) {\n      this._cells = value;\n    }\n  }, {\n    key: \"emptyCells\",\n    get: function get() {\n      var _this = this;\n\n      return integerArray(this.totalRows).map(function (x) {\n        return integerArray(_this.totalColumns).map(function (y) {\n          return 0;\n        });\n      });\n    }\n  }, {\n    key: \"images\",\n    get: function get() {\n      return this._images;\n    },\n    set: function set(value) {\n      var _this2 = this;\n\n      this._images = value.map(function (img, index) {\n        return Image.BuildForTile(img, _this2.tileDimensions, index + 1);\n      }); // console.dir(this.images);\n      // console.dir(this.tiles);\n      // console.dir(this);\n    }\n  }, {\n    key: \"tiles\",\n    get: function get() {\n      var _this3 = this;\n\n      this.cells = this.emptyCells;\n      return integerArray(this.totalCells).reduce(function (acc, i) {\n        // console.dir(acc);\n        return _this3.isCellFilled(i) ? acc : [].concat(_toConsumableArray(acc), [_this3.fillCell(i)]);\n      }, []);\n    }\n  }, {\n    key: \"totalCells\",\n    get: function get() {\n      return this.totalRows * this.totalColumns;\n    }\n  }, {\n    key: \"buildTile\",\n    value: function buildTile(image, dimensions, coordinates, index) {\n      var t = build(Tile, {\n        image: image,\n        dimensions: dimensions,\n        coordinates: coordinates,\n        index: index,\n        cellHeight: this.cellHeight,\n        cellWidth: this.cellWidth\n      }); // console.log(\n      //     '\\nTILE ASSIGNED TO INDEX', index,\n      //     '\\nStart Row:\\t', t.startRow,\n      //     '\\nStartColumn:\\t', t.startColumn,\n      //     '\\nRows:\\t', t.rows,\n      //     '\\nColumns:\\t', t.columns,\n      // );\n      // console.dir(t);\n\n      return t;\n    }\n  }, {\n    key: \"fillCell\",\n    value: function fillCell(index) {\n      var _this4 = this;\n\n      // console.log('\\n\\n\\n\\nFILLING CELL AT INDEX', index);\n      var coordinates = this.findCoordinates(index); // console.log(\n      //     '\\nStart Row:\\t', coordinates.row,\n      //     '\\nStart Column:\\t', coordinates.column,\n      // );\n\n      var dim = this.findAvailableDimensions(coordinates.row, coordinates.column); // console.log('Available Dimensions...');\n\n      dim.forEach(function (x) {// console.log(\n        //     '\\nRows:\\t', x.rows,\n        //     '\\nColumns:\\t', x.columns,\n        // );\n      });\n      return this.images.reduce(function (acc, image, i) {\n        if (acc) {\n          return acc;\n        }\n\n        var dimensions = _this4.findImageDimensions(image, dim);\n\n        if (dimensions) {\n          _this4.reorderImages(i);\n\n          var tile = _this4.buildTile(image, dimensions, coordinates, index);\n\n          _this4.markCellsFilled(tile); // console.dir(this);\n          // console.dir(this.cells);\n          // console.log('_____________________________________________________________\\n\\n\\n\\n');\n\n\n          return tile;\n        }\n\n        return null;\n      }, null);\n    }\n  }, {\n    key: \"findAvailableColumns\",\n    value: function findAvailableColumns(startRow, startColumn) {\n      var _this5 = this;\n\n      return Math.max.apply(Math, _toConsumableArray(positiveIntegerArray(this.maxColumns).map(function (k) {\n        return k <= _this5.maxColumns && startColumn + k <= _this5.totalColumns && _this5.cells[startRow] && _this5.cells[startRow][startColumn + k] === 0 ? k : 1;\n      })));\n    }\n  }, {\n    key: \"findAvailableRows\",\n    value: function findAvailableRows(startRow, startColumn) {\n      var _this6 = this;\n\n      return Math.max.apply(Math, _toConsumableArray(positiveIntegerArray(this.maxRows).map(function (k) {\n        return k <= _this6.maxRows && startRow + k <= _this6.totalRows && _this6.cells[startRow + k] && _this6.cells[startRow + k][startColumn] === 0 ? k : 1;\n      })));\n    }\n  }, {\n    key: \"findAvailableDimensions\",\n    value: function findAvailableDimensions(startRow, startColumn) {\n      var availableRows = this.findAvailableRows(startRow, startColumn);\n      var availableColumns = this.findAvailableColumns(startRow, startColumn);\n      return this.tileDimensions.filter(function (x) {\n        return x.rows <= availableRows && x.columns <= availableColumns;\n      });\n    }\n  }, {\n    key: \"findCoordinates\",\n    value: function findCoordinates(index) {\n      var remainder = (index + this.totalColumns) % this.totalColumns;\n      return {\n        row: (index - remainder) / this.totalColumns,\n        column: remainder\n      };\n    }\n  }, {\n    key: \"findImageDimensions\",\n    value: function findImageDimensions(image, dim) {\n      return image.dimensions.find(function (x) {\n        return inArray(dim, x);\n      });\n    }\n  }, {\n    key: \"isCellFilled\",\n    value: function isCellFilled(index) {\n      var coordinates = this.findCoordinates(index);\n      return this.cells[coordinates.row][coordinates.column] !== 0;\n    }\n  }, {\n    key: \"markCellsFilled\",\n    value: function markCellsFilled(tile) {\n      var cells = this.cells;\n      var coordinates = this.findCoordinates(tile.index);\n\n      for (var i = 0; i < tile.rows; i++) {\n        for (var j = 0; j < tile.columns; j++) {\n          cells[coordinates.row + i][coordinates.column + j] = tile.id;\n        }\n      }\n\n      this.cells = cells;\n    }\n  }, {\n    key: \"reorderImages\",\n    value: function reorderImages(index) {\n      this._images = [].concat(_toConsumableArray(this._images.filter(function (img, i) {\n        return i !== index;\n      })), [this._images[index]]);\n    }\n  }], [{\n    key: \"Build\",\n    value: function Build(images, canvasHeight, canvasWidth) {\n      var totalRows = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n      var totalColumns = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;\n      var maxRows = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0;\n      var maxColumns = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : 0;\n      var cellHeight = canvasHeight / totalRows;\n      var cellWidth = canvasWidth / totalColumns;\n      var tileDimensions = Collage.GetTileDimensions(cellHeight, cellWidth, maxRows, maxColumns);\n      var collage = Object.assign(new Collage(), {\n        canvasHeight: canvasHeight,\n        canvasWidth: canvasWidth,\n        totalRows: totalRows,\n        totalColumns: totalColumns,\n        maxRows: maxRows,\n        maxColumns: maxColumns,\n        cellHeight: cellHeight,\n        cellWidth: cellWidth,\n        tileDimensions: tileDimensions\n      });\n      collage.images = images;\n      return collage;\n    }\n    /**\r\n     * Build array of all possible dimensions for a single tile in the collage.\r\n     * @param cellHeight\r\n     * @param cellWidth\r\n     * @param maxRows\r\n     * @param maxColumns\r\n     */\n\n  }, {\n    key: \"GetTileDimensions\",\n    value: function GetTileDimensions(cellHeight, cellWidth, maxRows, maxColumns) {\n      return positiveIntegerArray(maxRows).reduce(function (acc, x) {\n        var dimensions = positiveIntegerArray(maxColumns).map(function (y) {\n          return build(Dimensions, {\n            rows: x,\n            columns: y,\n            height: x * cellHeight,\n            width: y * cellWidth\n          });\n        });\n        return [].concat(_toConsumableArray(acc), _toConsumableArray(dimensions));\n      }, []);\n    }\n  }]);\n\n  return Collage;\n}();","map":null,"metadata":{},"sourceType":"module"}