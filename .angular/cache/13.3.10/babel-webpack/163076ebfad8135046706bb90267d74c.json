{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\dsalgado.contr\\\\source\\\\Workspaces\\\\CAIU-LIBRARY\\\\CAIU-LIBRARY\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\classCallCheck.js\";\nimport _createClass from \"C:\\\\Users\\\\dsalgado.contr\\\\source\\\\Workspaces\\\\CAIU-LIBRARY\\\\CAIU-LIBRARY\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\createClass.js\";\nimport { Store } from '@ngrx/store';\nimport { map } from 'rxjs/operators';\nimport { LookupActions } from './lookup.actions';\nimport { AddLookupPayload } from './lookup.models';\nimport { LOOKUP_PATH, LOOKUP_KEYS } from './lookup.module';\nimport { HttpActions } from '../http/http.actions';\nimport { build } from '../shared/utils';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/store\";\nexport var LookupService = /*#__PURE__*/(function () {\n  var LookupService = /*#__PURE__*/function () {\n    function LookupService(store) {\n      var lookupPath = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'lookup';\n      var lookupKeys = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n\n      _classCallCheck(this, LookupService);\n\n      this.store = store;\n      this._keys = [];\n      this.path = 'lookup';\n      this.path = lookupPath;\n      this.keys = lookupKeys;\n    }\n\n    _createClass(LookupService, [{\n      key: \"keys\",\n      get: function get() {\n        return this._keys;\n      },\n      set: function set(value) {\n        this._keys = value;\n      }\n    }, {\n      key: \"load\",\n      value: function load(keys, values) {\n        if (values) {\n          this.loadValues(values);\n        }\n\n        this.loadKeys(keys);\n      }\n    }, {\n      key: \"loadKeys\",\n      value: function loadKeys(keys) {\n        this.keys = keys;\n        this.store.dispatch(HttpActions.get(\"\".concat(this.path).concat(this.buildQueryString()), LookupActions.ADD_KEYS));\n      }\n    }, {\n      key: \"loadValues\",\n      value: function loadValues(values) {\n        this.store.dispatch(LookupActions.addValues(values));\n      }\n    }, {\n      key: \"lookup\",\n      value: function lookup(key) {\n        return this.store.select('lookup').pipe(map(function (s) {\n          return s[key];\n        }));\n      }\n    }, {\n      key: \"addKey\",\n      value: function addKey(key, value) {\n        this.store.dispatch(LookupActions.addKey(build(AddLookupPayload, {\n          key: key,\n          value: value\n        })));\n      }\n    }, {\n      key: \"removeKey\",\n      value: function removeKey(key) {\n        this.store.dispatch(LookupActions.removeKey(key));\n      }\n    }, {\n      key: \"buildQueryString\",\n      value: function buildQueryString() {\n        var query = this.keys.length > 0 ? \"?keys=\".concat(this.keys[0]) : '';\n        this.keys.filter(function (key, index) {\n          return index !== 0;\n        }).forEach(function (key) {\n          query += \"&keys=\".concat(key);\n        });\n        return query;\n      }\n    }]);\n\n    return LookupService;\n  }();\n\n  LookupService.ɵfac = function LookupService_Factory(t) {\n    return new (t || LookupService)(i0.ɵɵinject(i1.Store), i0.ɵɵinject(LOOKUP_PATH), i0.ɵɵinject(LOOKUP_KEYS));\n  };\n\n  LookupService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: LookupService,\n    factory: LookupService.ɵfac,\n    providedIn: 'root'\n  });\n  return LookupService;\n})();","map":null,"metadata":{},"sourceType":"module"}