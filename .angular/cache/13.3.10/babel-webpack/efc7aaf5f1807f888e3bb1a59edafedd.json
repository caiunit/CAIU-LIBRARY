{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\dsalgado.contr\\\\source\\\\Workspaces\\\\CAIU-LIBRARY\\\\CAIU-LIBRARY\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\classCallCheck.js\";\nimport _createClass from \"C:\\\\Users\\\\dsalgado.contr\\\\source\\\\Workspaces\\\\CAIU-LIBRARY\\\\CAIU-LIBRARY\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\createClass.js\";\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\n\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { EventActions, MessagesActions } from './events.actions';\nimport { Events, MessageSubscription } from './events.models';\nimport { messageSubscriptionsSelector } from './events.selectors';\nimport { build } from '../shared/utils';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/effects\";\nimport * as i2 from \"@ngrx/store\";\nexport var EventEffects = /*#__PURE__*/function () {\n  function EventEffects(actions$, store) {\n    var _this = this;\n\n    _classCallCheck(this, EventEffects);\n\n    this.actions$ = actions$;\n    this.store = store;\n    this.events = new Events();\n    /**\r\n     * Trigger event if action is a registered trigger.\r\n     */\n\n    this.onTriggerEvent = this.actions$.pipe(filter(function (action) {\n      return _this.events.actions.indexOf(action.type) !== -1;\n    }), map(this.trigger));\n    this.store.select(function (s) {\n      return s['events'];\n    }).subscribe(function (events) {\n      _this.events = events;\n    });\n  }\n\n  _createClass(EventEffects, [{\n    key: \"trigger\",\n    value: function trigger(action) {\n      return EventActions.triggerEvent(action);\n    }\n  }]);\n\n  return EventEffects;\n}();\n\nEventEffects.ɵfac = function EventEffects_Factory(t) {\n  return new (t || EventEffects)(i0.ɵɵinject(i1.Actions), i0.ɵɵinject(i2.Store));\n};\n\nEventEffects.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: EventEffects,\n  factory: EventEffects.ɵfac\n});\n\n__decorate([Effect(), __metadata(\"design:type\", Observable)], EventEffects.prototype, \"onTriggerEvent\", void 0);\n\nexport var MessagesEffects = /*#__PURE__*/function () {\n  function MessagesEffects(actions$, store) {\n    var _this2 = this;\n\n    _classCallCheck(this, MessagesEffects);\n\n    this.actions$ = actions$;\n    this.store = store;\n    this.messageSubscriptions = [];\n    /**\r\n     * Broadcast message if action has a registered subscription.\r\n     */\n\n    this.onTriggerEvent = this.actions$.pipe(filter(function (action) {\n      return _this2.messageSubscriptions.findIndex(function (x) {\n        return x.action === action.type;\n      }) !== -1;\n    }), map(function (x) {\n      return _this2.broadcast(x, _this2.messageSubscriptions);\n    }));\n    /**\r\n     * Clear messages after they have been emitted.\r\n     */\n\n    this.onMessageAdded = this.actions$.pipe(ofType(MessagesActions.ADD), map(function (action) {\n      return _this2.clearMessages(action);\n    }));\n    messageSubscriptionsSelector(store).subscribe(function (x) {\n      if (x && Array.isArray(x)) {\n        _this2.messageSubscriptions = x;\n      }\n    });\n  }\n\n  _createClass(MessagesEffects, [{\n    key: \"broadcast\",\n    value: function broadcast(action, messageSubscriptions) {\n      var subscription = build(MessageSubscription, messageSubscriptions.find(function (x) {\n        return x.action === action.type;\n      }));\n      return MessagesActions.add(subscription, action);\n    }\n  }, {\n    key: \"clearMessages\",\n    value: function clearMessages(action) {\n      return {\n        type: MessagesActions.CLEAR,\n        payload: action.payload\n      };\n    }\n  }]);\n\n  return MessagesEffects;\n}();\n\nMessagesEffects.ɵfac = function MessagesEffects_Factory(t) {\n  return new (t || MessagesEffects)(i0.ɵɵinject(i1.Actions), i0.ɵɵinject(i2.Store));\n};\n\nMessagesEffects.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: MessagesEffects,\n  factory: MessagesEffects.ɵfac\n});\n\n__decorate([Effect(), __metadata(\"design:type\", Observable)], MessagesEffects.prototype, \"onTriggerEvent\", void 0);\n\n__decorate([Effect(), __metadata(\"design:type\", Observable)], MessagesEffects.prototype, \"onMessageAdded\", void 0);","map":null,"metadata":{},"sourceType":"module"}