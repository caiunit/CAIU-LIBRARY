{"version":3,"file":"grid.component.d.ts","sources":["grid.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { AfterContentInit, ElementRef, OnChanges, OnInit, QueryList, Renderer2, EventEmitter } from '@angular/core';\r\nimport { Grid } from './grid.model';\r\nimport { GridColumnComponent } from './grid-column/grid-column.component';\r\nimport { CompositeFilterDescriptor, GroupableSettings, SortDescriptor, SortSettings, GridDataResult, DataStateChangeEvent, PageChangeEvent } from '../../shared/kendo';\r\nexport declare class GridComponent implements OnChanges, OnInit, AfterContentInit {\r\n    private _elementRef;\r\n    private _renderer;\r\n    model: Grid<any>;\r\n    advancedFilter: boolean;\r\n    autoCalculateHeight: boolean;\r\n    buttonColor: string;\r\n    buttonCount: number;\r\n    buttonClass: string;\r\n    pagerInfo: boolean;\r\n    pagerType: 'numeric' | 'input';\r\n    pageSizes: boolean;\r\n    previousNext: boolean;\r\n    detailRowHeight: number;\r\n    export: boolean;\r\n    fileName: string;\r\n    filter: CompositeFilterDescriptor;\r\n    filterable: boolean;\r\n    groupable: GroupableSettings | boolean;\r\n    height: number;\r\n    pageSize: number;\r\n    pageable: any | boolean;\r\n    pager: any;\r\n    pdfHeader: string;\r\n    rowHeight: number;\r\n    rowHeightMax: number;\r\n    scrollable: any;\r\n    selectable: boolean;\r\n    skip: number;\r\n    sortable: SortSettings;\r\n    group: any[];\r\n    rowClass: Function;\r\n    sort: SortDescriptor[];\r\n    total: number;\r\n    changes: EventEmitter<DataStateChangeEvent>;\r\n    grid: ElementRef;\r\n    contentChildren: QueryList<GridColumnComponent>;\r\n    columns: GridColumnComponent[];\r\n    private _color;\r\n    private filtering;\r\n    constructor(_elementRef: ElementRef, _renderer: Renderer2);\r\n    /** The color of the toolbar. Can be primary, accent, or warn. */\r\n    color: string;\r\n    private _updateColor(newColor);\r\n    private _setElementColor(color, isAdd);\r\n    readonly activeRows: any[];\r\n    readonly computedRowHeight: number;\r\n    readonly dynamicHeight: number;\r\n    readonly excelFileName: string;\r\n    readonly filters: any[];\r\n    readonly gridData: GridDataResult;\r\n    readonly headerHeight: number;\r\n    readonly numericHeight: number;\r\n    readonly pagerHeight: number;\r\n    readonly pagerSettings: any;\r\n    readonly pdfFileName: string;\r\n    readonly rows: any[];\r\n    readonly showFilters: boolean;\r\n    readonly take: number;\r\n    readonly toolbarHeight: number;\r\n    ngOnChanges(): void;\r\n    ngOnInit(): void;\r\n    ngAfterContentInit(): void;\r\n    dataStateChange(state: DataStateChangeEvent): void;\r\n    save(component: any): void;\r\n    protected filterChange(e: CompositeFilterDescriptor): void;\r\n    protected pageChange(e: PageChangeEvent): void;\r\n    protected sortChange(sort: SortDescriptor[]): void;\r\n    private filterRows(rows);\r\n    protected pageRows(rows: any[]): any[];\r\n    protected sortRows(rows: any[]): any[];\r\n}\r\n"]}