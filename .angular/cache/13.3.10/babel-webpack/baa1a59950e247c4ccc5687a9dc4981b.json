{"ast":null,"code":"import _defineProperty from \"C:\\\\Users\\\\dsalgado.contr\\\\source\\\\Workspaces\\\\CAIU-LIBRARY\\\\CAIU-LIBRARY\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\defineProperty.js\";\nimport _inherits from \"C:\\\\Users\\\\dsalgado.contr\\\\source\\\\Workspaces\\\\CAIU-LIBRARY\\\\CAIU-LIBRARY\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\inherits.js\";\nimport _createSuper from \"C:\\\\Users\\\\dsalgado.contr\\\\source\\\\Workspaces\\\\CAIU-LIBRARY\\\\CAIU-LIBRARY\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\createSuper.js\";\nimport _toConsumableArray from \"C:\\\\Users\\\\dsalgado.contr\\\\source\\\\Workspaces\\\\CAIU-LIBRARY\\\\CAIU-LIBRARY\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\toConsumableArray.js\";\nimport _createClass from \"C:\\\\Users\\\\dsalgado.contr\\\\source\\\\Workspaces\\\\CAIU-LIBRARY\\\\CAIU-LIBRARY\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\createClass.js\";\nimport _classCallCheck from \"C:\\\\Users\\\\dsalgado.contr\\\\source\\\\Workspaces\\\\CAIU-LIBRARY\\\\CAIU-LIBRARY\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\classCallCheck.js\";\nimport { build, assignProps } from '../shared/utils';\nexport var ActivatedRoutePayload = /*#__PURE__*/_createClass(function ActivatedRoutePayload() {\n  _classCallCheck(this, ActivatedRoutePayload);\n\n  this.routeName = '';\n});\nexport var Breadcrumbs = /*#__PURE__*/_createClass(function Breadcrumbs(segments) {\n  _classCallCheck(this, Breadcrumbs);\n\n  this.segments = segments;\n});\nexport var CustomRoute = /*#__PURE__*/function () {\n  function CustomRoute(props) {\n    _classCallCheck(this, CustomRoute);\n\n    this.children = [];\n    this.lazyChildren = [];\n    this._path = '';\n    assignProps(this, props);\n  }\n\n  _createClass(CustomRoute, [{\n    key: \"path\",\n    get: function get() {\n      return this._path;\n    },\n    set: function set(value) {\n      this._path = value;\n    }\n  }, {\n    key: \"route\",\n    get: function get() {\n      return {\n        component: this.component,\n        children: [].concat(_toConsumableArray(this.children), _toConsumableArray(this.lazyChildren))\n      };\n    }\n  }]);\n\n  return CustomRoute;\n}();\nexport var LazyRoute = /*#__PURE__*/function (_CustomRoute) {\n  _inherits(LazyRoute, _CustomRoute);\n\n  var _super = _createSuper(LazyRoute);\n\n  function LazyRoute(props) {\n    var _this;\n\n    _classCallCheck(this, LazyRoute);\n\n    _this = _super.call(this, props);\n    _this.path = '';\n    return _this;\n  }\n\n  return _createClass(LazyRoute);\n}(CustomRoute);\nexport var NavigationStatus = /*#__PURE__*/(function () {\n  (function (NavigationStatus) {\n    NavigationStatus[NavigationStatus[\"Default\"] = 0] = \"Default\";\n    NavigationStatus[NavigationStatus[\"NavigationStart\"] = 1] = \"NavigationStart\";\n    NavigationStatus[NavigationStatus[\"NavigationCancel\"] = 2] = \"NavigationCancel\";\n    NavigationStatus[NavigationStatus[\"NavigationError\"] = 3] = \"NavigationError\";\n    NavigationStatus[NavigationStatus[\"RoutesRecognized\"] = 4] = \"RoutesRecognized\";\n    NavigationStatus[NavigationStatus[\"NavigationEnd\"] = 5] = \"NavigationEnd\";\n  })(NavigationStatus || (NavigationStatus = {}));\n\n  return NavigationStatus;\n})();\nexport var RouteSegment = /*#__PURE__*/function () {\n  function RouteSegment() {\n    _classCallCheck(this, RouteSegment);\n\n    /** The URL fragment shared by all the routes */\n    this.fragment = '';\n    /** The order of the segment in the route */\n\n    this.order = 0;\n    /** The outlet name of the route */\n\n    this.outlet = '';\n    /** The label to pass to the anchor tag */\n\n    this.routeLabel = '';\n    /** The unique identifier for the route segment */\n\n    this.routeName = '';\n  }\n  /** The link to pass to the anchor tag */\n\n\n  _createClass(RouteSegment, [{\n    key: \"routerLink\",\n    get: function get() {\n      return this.pathFromRoot.map(function (r) {\n        return r.url;\n      }).reduce(function (acc, x) {\n        var segment = RouterState.BuildUrlSegment(x);\n        return segment && segment !== '/' ? \"\".concat(acc).concat(segment) : acc;\n      }, '');\n    }\n  }]);\n\n  return RouteSegment;\n}();\nexport var RouterState = /*#__PURE__*/function () {\n  function RouterState() {\n    _classCallCheck(this, RouterState);\n\n    this.id = 0;\n    this.error = undefined;\n    this.events = [];\n    this.history = [];\n    this.navigationStatus = NavigationStatus.Default;\n    this.pendingState = undefined;\n    this.pendingUrl = '';\n    this.pendingUrlAfterRedirects = '';\n    this.reason = '';\n    this.state = undefined;\n    this.url = '';\n    this.urlAfterRedirects = '';\n  }\n\n  _createClass(RouterState, [{\n    key: \"activatedRoute\",\n    get: function get() {\n      return RouterState.GetActivatedRoute(this.rootRoute);\n    }\n  }, {\n    key: \"rootRoute\",\n    get: function get() {\n      return this.state ? this.state.root : null;\n    }\n  }, {\n    key: \"activatedOutlets\",\n    get: function get() {\n      return RouterState.GetActivatedOutlets(this.rootRoute);\n    }\n  }, {\n    key: \"lastEvent\",\n    get: function get() {\n      return this.events[-1];\n    }\n  }, {\n    key: \"params\",\n    get: function get() {\n      return RouterState.GetAllParams(this.rootRoute);\n    }\n  }, {\n    key: \"routeName\",\n    get: function get() {\n      return RouterState.GetRouteName(this.activatedRoute);\n    }\n  }, {\n    key: \"visited\",\n    get: function get() {\n      return this.history.map(function (x) {\n        return x.link;\n      });\n    }\n  }, {\n    key: \"addRouterEvent\",\n    value: function addRouterEvent(e, eventType) {\n      var newEvent = {\n        eventType: eventType,\n        event: e\n      };\n      return [].concat(_toConsumableArray(this.events), [newEvent]);\n    }\n  }, {\n    key: \"navigationCancel\",\n    value: function navigationCancel(payload) {\n      return build(RouterState, this, {\n        navigationStatus: NavigationStatus.NavigationCancel,\n        events: this.addRouterEvent(payload, NavigationStatus.NavigationCancel),\n        id: payload.id,\n        pendingState: null,\n        pendingUrl: '',\n        pendingUrlAfterRedirects: '',\n        reason: payload.reason\n      });\n    }\n  }, {\n    key: \"navigationEnd\",\n    value: function navigationEnd(payload) {\n      var history = [payload.toString()].concat(_toConsumableArray(this.history));\n      return build(RouterState, this, {\n        state: this.pendingState\n      }, {\n        history: history,\n        navigationStatus: NavigationStatus.NavigationEnd,\n        events: this.addRouterEvent(payload, NavigationStatus.NavigationEnd),\n        id: payload.id,\n        pendingState: null,\n        pendingUrl: '',\n        pendingUrlAfterRedirects: '',\n        url: payload.url,\n        urlAfterRedirects: payload.urlAfterRedirects\n      });\n    }\n  }, {\n    key: \"navigationError\",\n    value: function navigationError(payload) {\n      return build(RouterState, this, {\n        navigationStatus: NavigationStatus.NavigationError,\n        events: this.addRouterEvent(payload, NavigationStatus.NavigationError),\n        id: payload.id,\n        pendingState: null,\n        pendingUrl: '',\n        pendingUrlAfterRedirects: '',\n        error: payload.error\n      });\n    }\n  }, {\n    key: \"navigationStart\",\n    value: function navigationStart(payload) {\n      return build(RouterState, this, {\n        navigationStatus: NavigationStatus.NavigationStart,\n        events: this.addRouterEvent(payload, NavigationStatus.NavigationStart),\n        id: payload.id,\n        pendingUrl: payload.url\n      });\n    }\n  }, {\n    key: \"routesRecognized\",\n    value: function routesRecognized(payload) {\n      return build(RouterState, this, {\n        navigationStatus: NavigationStatus.RoutesRecognized,\n        events: this.addRouterEvent(payload, NavigationStatus.RoutesRecognized),\n        id: payload.id,\n        pendingState: payload.state,\n        pendingUrl: payload.url,\n        pendingUrlAfterRedirects: payload.urlAfterRedirects\n      });\n    }\n  }], [{\n    key: \"BuildRoute\",\n    value: function BuildRoute(props) {\n      var r = new CustomRoute(props);\n      return r;\n    }\n  }, {\n    key: \"BuildLazyRoute\",\n    value: function BuildLazyRoute(props) {\n      var r = new LazyRoute(props);\n      return r;\n    }\n  }, {\n    key: \"BuildUrlSegment\",\n    value: function BuildUrlSegment(url) {\n      return url.reduce(function (acc, segment) {\n        return segment.path && segment.path !== '/' ? \"\".concat(acc, \"/\").concat(segment.path) : acc;\n      }, '');\n    }\n  }, {\n    key: \"GetActivatedOutlets\",\n    value: function GetActivatedOutlets(root) {\n      var index = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      return root ? root.children.reduce(function (acc, r, currentIndex) {\n        var i = index + currentIndex;\n        var routeName = RouterState.GetRouteName(r);\n        var existing = build(RouteSegment, acc[routeName]);\n        var outlet = RouterState.GetRouteSegment(r, existing, i);\n        return routeName ? Object.assign(acc, RouterState.GetActivatedOutlets(r, i + 1), _defineProperty({}, routeName, outlet)) : Object.assign(acc, RouterState.GetActivatedOutlets(r, i + 1));\n      }, {}) : {};\n    }\n  }, {\n    key: \"GetActivatedRoute\",\n    value: function GetActivatedRoute(root) {\n      return root && Array.isArray(root.children) ? root.children.reduce(function (acc, r) {\n        return RouterState.GetActivatedRoute(r);\n      }, root) : null;\n    }\n  }, {\n    key: \"GetAllParams\",\n    value: function GetAllParams(route) {\n      return route ? route.children.reduce(function (acc, r) {\n        return Object.assign({}, acc, RouterState.GetAllParams(r));\n      }, Object.assign({}, route.params, route.queryParams)) : {};\n    }\n  }, {\n    key: \"GetRouteData\",\n    value: function GetRouteData(route) {\n      return route.data;\n    }\n  }, {\n    key: \"GetRouteSegment\",\n    value: function GetRouteSegment(route) {\n      var existing = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new RouteSegment();\n      var index = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n      var routeName = RouterState.GetRouteName(route);\n      return build(RouteSegment, existing, {\n        data: route.data,\n        fragment: route.fragment,\n        order: index,\n        outlet: route.outlet,\n        pathFromRoot: route.pathFromRoot,\n        params: route.params,\n        routeName: routeName,\n        routeLabel: RouterState.GetRouteData(route)['routeLabel'] || existing.routeLabel\n      });\n    }\n  }, {\n    key: \"GetRouteName\",\n    value: function GetRouteName(route) {\n      return route ? RouterState.GetRouteData(route)['routeName'] : '';\n    }\n  }]);\n\n  return RouterState;\n}();\nexport var VisitedRoute = /*#__PURE__*/_createClass(function VisitedRoute() {\n  _classCallCheck(this, VisitedRoute);\n\n  this.label = '';\n  this.link = '';\n  this.name = '';\n  this.visitTime = new Date();\n});","map":null,"metadata":{},"sourceType":"module"}