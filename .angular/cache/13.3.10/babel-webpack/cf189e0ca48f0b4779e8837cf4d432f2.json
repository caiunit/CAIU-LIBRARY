{"ast":null,"code":"import _toConsumableArray from \"C:\\\\Users\\\\dsalgado.contr\\\\source\\\\Workspaces\\\\CAIU-LIBRARY\\\\CAIU-LIBRARY\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\toConsumableArray.js\";\nimport _defineProperty from \"C:\\\\Users\\\\dsalgado.contr\\\\source\\\\Workspaces\\\\CAIU-LIBRARY\\\\CAIU-LIBRARY\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\defineProperty.js\";\nimport _classCallCheck from \"C:\\\\Users\\\\dsalgado.contr\\\\source\\\\Workspaces\\\\CAIU-LIBRARY\\\\CAIU-LIBRARY\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\classCallCheck.js\";\nimport _createClass from \"C:\\\\Users\\\\dsalgado.contr\\\\source\\\\Workspaces\\\\CAIU-LIBRARY\\\\CAIU-LIBRARY\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\createClass.js\";\nimport { arrayUnion, build as _build, inArray, truthy } from './utils';\nexport var Collection = /*#__PURE__*/function () {\n  function Collection(ctor) {\n    var findByKey = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'id';\n\n    _classCallCheck(this, Collection);\n\n    this.ctor = ctor;\n    this.findByKey = findByKey;\n    this.activeId = 0;\n    this.metadata = {};\n    this._items = {};\n  }\n\n  _createClass(Collection, [{\n    key: \"active\",\n    get: function get() {\n      var item = this.items[this.activeId] || {};\n      return this.ctor ? _build(this.ctor, item) : item;\n    }\n  }, {\n    key: \"count\",\n    get: function get() {\n      return this.toArray().length;\n    }\n  }, {\n    key: \"defaultItem\",\n    get: function get() {\n      return this.ctor ? new this.ctor() : {};\n    }\n  }, {\n    key: \"empty\",\n    get: function get() {\n      return this.toArray().length === 0;\n    }\n  }, {\n    key: \"instance\",\n    get: function get() {\n      var activeId = this.activeId;\n      var ctor = this.ctor;\n      var lastUpdated = this.lastUpdated;\n      var metadata = this.metadata; // const collection = this.constructor();\n\n      var collection = new Collection();\n      collection.activeId = activeId;\n      collection.ctor = ctor;\n      collection.lastUpdated = lastUpdated;\n      collection.metadata = metadata;\n      return collection;\n    }\n  }, {\n    key: \"items\",\n    get: function get() {\n      return this._items;\n    },\n    set: function set(value) {\n      this._items = value;\n      this.lastUpdated = new Date();\n    }\n  }, {\n    key: \"keys\",\n    get: function get() {\n      return Object.keys(this.items);\n    }\n  }, {\n    key: \"asArray\",\n    get: function get() {\n      return this.toArray();\n    }\n  }, {\n    key: \"itemsArray\",\n    get: function get() {\n      return this.asArray;\n    }\n  }, {\n    key: \"toArray\",\n    value: function toArray() {\n      var _this = this;\n\n      return Object.keys(this.items).map(function (key) {\n        return _this.items[key];\n      });\n    }\n  }, {\n    key: \"activate\",\n    value: function activate(id, key) {\n      var findByKey = key || this.findByKey;\n      var items = this.items[id] ? this.copyItems() : Object.assign(this.copyItems(), _defineProperty({}, id, _defineProperty({}, findByKey, id)));\n      return Object.assign(new Collection(), this, {\n        activeId: id,\n        items: items\n      });\n    }\n  }, {\n    key: \"addItem\",\n    value: function addItem(item, key) {\n      var items = this.copyItems();\n      return Object.assign(this.constructor(), this, {\n        items: Object.assign(items, _defineProperty({}, key, item))\n      });\n    }\n  }, {\n    key: \"addItems\",\n    value: function addItems(items, key) {\n      var _this2 = this;\n\n      var findByKey = key || this.findByKey;\n      var newItems = {};\n      this.toArray().forEach(function (item) {\n        newItems[item[findByKey]] = item;\n      });\n      items.forEach(function (item) {\n        var existingItem = newItems[item[findByKey]] ? newItems[item[findByKey]] : {};\n        var existingMatches = existingItem['matches'] || [];\n        var newMatches = item['matches'] || [];\n        var matches = arrayUnion(existingMatches, newMatches);\n\n        var newItem = _this2.buildItem(item, {\n          matches: matches\n        });\n\n        newItems[item[findByKey]] = _this2.buildItem(existingItem, newItem);\n      });\n      this.items = newItems;\n      return Object.assign(new Collection(), this);\n    }\n  }, {\n    key: \"build\",\n    value: function build(items, ctor) {\n      return ctor ? _build(ctor, {\n        items: items\n      }) : Object.assign(this.instance, {\n        items: items\n      });\n    }\n  }, {\n    key: \"buildItem\",\n    value: function buildItem(existingItem, newItem, ctor) {\n      var existing = existingItem || {};\n      var item = ctor ? _build(ctor, existing, newItem) : this.ctor ? _build(this.ctor, existing, newItem) : Object.assign({}, existing, newItem);\n      return item;\n    }\n  }, {\n    key: \"buildItems\",\n    value: function buildItems(items, ctor) {\n      var factory = ctor ? ctor : this.ctor;\n      return items.map(function (x) {\n        return factory ? _build(factory, x) : Object.assign({}, x);\n      });\n    }\n  }, {\n    key: \"copyItems\",\n    value: function copyItems() {\n      var _this3 = this;\n\n      return Object.keys(this.items).reduce(function (acc, key) {\n        acc[key] = _this3.get(key);\n        return acc;\n      }, {});\n    }\n  }, {\n    key: \"delete\",\n    value: function _delete(key) {\n      return this.removeAt(key);\n    }\n  }, {\n    key: \"filter\",\n    value: function filter(f) {\n      var items = Collection.BuildDictionaryFromArray(this.toArray().filter(f));\n      return Object.assign(new Collection(), this, {\n        items: items\n      });\n    }\n  }, {\n    key: \"filterBy\",\n    value: function filterBy(f) {\n      return this.filterItems(f);\n    }\n  }, {\n    key: \"filterItems\",\n    value: function filterItems(f) {\n      return this.toArray().filter(f);\n    }\n  }, {\n    key: \"findBy\",\n    value: function findBy(f) {\n      return this.asArray.find(f) || this.defaultItem;\n    }\n  }, {\n    key: \"get\",\n    value: function get(id) {\n      var existing = this.items[id];\n      return this.ctor ? _build(this.ctor, existing) : Object.assign({}, existing);\n    }\n  }, {\n    key: \"keyExists\",\n    value: function keyExists(key) {\n      return truthy(this.items[key]);\n    }\n  }, {\n    key: \"map\",\n    value: function map(f) {\n      var items = Collection.BuildDictionaryFromArray(this.toArray().map(f));\n      return Object.assign(new Collection(), this, {\n        items: items\n      });\n    }\n  }, {\n    key: \"patch\",\n    value: function patch(id, props) {\n      var existing = this.get(id);\n      return this.update(this.buildItem(existing, props));\n    }\n  }, {\n    key: \"query\",\n    value: function query(path) {\n      return this.toArray().filter(function (item) {\n        return Collection.Filter(item, path);\n      });\n    }\n  }, {\n    key: \"queryAnd\",\n    value: function queryAnd(paths) {\n      return this.toArray().filter(function (item) {\n        return Collection.FilterAnd(item, paths);\n      });\n    }\n  }, {\n    key: \"queryOr\",\n    value: function queryOr(paths) {\n      return this.toArray().filter(function (item) {\n        return Collection.FilterOr(item, paths);\n      });\n    }\n  }, {\n    key: \"removeAt\",\n    value: function removeAt(key) {\n      var _this4 = this;\n\n      var keys = Object.keys(this.items);\n      var items = Collection.BuildDictionaryFromArray(keys.filter(function (x) {\n        return x.toString() !== key.toString();\n      }).map(function (y) {\n        return _this4.items[y];\n      }));\n      return Object.assign(new Collection(), this, {\n        items: items\n      });\n    }\n  }, {\n    key: \"removeItem\",\n    value: function removeItem(key) {\n      var _this5 = this;\n\n      var collection = this.constructor();\n      var keys = Object.keys(this.items).filter(function (k) {\n        return k !== key;\n      });\n      keys.forEach(function (k) {\n        collection.items[k] = Object.assign({}, _this5.items[k]);\n      });\n      return collection;\n    }\n  }, {\n    key: \"removeItems\",\n    value: function removeItems(filter, key) {\n      var findByKey = key || this.findByKey;\n      var keys = this.toArray().filter(filter).map(function (x) {\n        return x[findByKey];\n      });\n      this.removeKeys(keys);\n    }\n  }, {\n    key: \"removeKeys\",\n    value: function removeKeys(keys) {\n      var _this6 = this;\n\n      keys.forEach(function (key) {\n        _this6.removeItem(key);\n      });\n    }\n  }, {\n    key: \"replace\",\n    value: function replace(itemsArray) {\n      var items = Collection.BuildDictionaryFromArray(this.buildItems(itemsArray));\n      return Object.assign(new Collection(), this, {\n        items: items\n      });\n    }\n  }, {\n    key: \"replaceItems\",\n    value: function replaceItems(items, filter) {\n      if (filter) {\n        var f = function f(x) {\n          return !filter(x);\n        };\n\n        return this.replaceItems([].concat(_toConsumableArray(this.filterItems(f)), _toConsumableArray(items)));\n      }\n\n      return Object.assign(new Collection(), this, {\n        items: items\n      });\n    }\n  }, {\n    key: \"setValue\",\n    value: function setValue(value) {\n      return Object.assign(new Collection(), this, value);\n    }\n  }, {\n    key: \"update\",\n    value: function update(value, ctor) {\n      if (Array.isArray(value)) {\n        return this.updateItems(value, ctor);\n      }\n\n      return this.updateItem(value, value[this.findByKey], ctor);\n    }\n  }, {\n    key: \"updateItem\",\n    value: function updateItem(item, key, ctor) {\n      var items = this.copyItems();\n      var updatedItem = this.buildItem(items[key], item, ctor);\n      return this.build(Object.assign(items, _defineProperty({}, key, updatedItem)));\n    }\n  }, {\n    key: \"updateItems\",\n    value: function updateItems(items, ctor) {\n      var _this7 = this;\n\n      var existingItems = this.copyItems();\n      var updatedItems = items.reduce(function (acc, item) {\n        var existingItem = acc[item[_this7.findByKey]];\n        acc[item[_this7.findByKey]] = _this7.buildItem(existingItem, item, ctor);\n        return acc;\n      }, existingItems);\n      return this.build(updatedItems);\n    }\n  }], [{\n    key: \"AddItem\",\n    value: function AddItem(state, key, item) {\n      var newState = {};\n      Object.keys(state).forEach(function (k) {\n        newState[k] = state[k];\n      });\n      newState[key] = item;\n      return newState;\n    }\n  }, {\n    key: \"BuildCollection\",\n    value: function BuildCollection(items) {\n      var findByKey = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'id';\n      var dictionary = Collection.BuildItems(items, findByKey);\n      return Object.assign(new Collection(), {\n        items: dictionary\n      });\n    }\n  }, {\n    key: \"BuildDictionaryFromArray\",\n    value: function BuildDictionaryFromArray(value) {\n      var key = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'id';\n      var obj = {};\n      value.forEach(function (item) {\n        obj[item[key]] = item;\n      });\n      return obj;\n    }\n  }, {\n    key: \"BuildFromArray\",\n    value: function BuildFromArray(items) {\n      var findByKey = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'id';\n      var dictionary = Collection.BuildItems(items, findByKey);\n      return Object.assign(new Collection(), {\n        items: dictionary\n      });\n    }\n  }, {\n    key: \"BuildItems\",\n    value: function BuildItems(items) {\n      var findByKey = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'id';\n      var dictionary = {};\n      items.forEach(function (item) {\n        var key = item[findByKey];\n        dictionary[key] = item;\n      });\n      return dictionary;\n    }\n  }, {\n    key: \"Filter\",\n    value: function Filter(item, path) {\n      return Array.isArray(item['matches']) && inArray(item['matches'], path);\n    }\n  }, {\n    key: \"FilterAnd\",\n    value: function FilterAnd(item, paths) {\n      return Array.isArray(item['matches']) && paths.every(function (path) {\n        return inArray(item['matches'], path);\n      });\n    }\n  }, {\n    key: \"FilterOr\",\n    value: function FilterOr(item, paths) {\n      return Array.isArray(item['matches']) && paths.some(function (path) {\n        return inArray(item['matches'], path);\n      });\n    }\n  }, {\n    key: \"RemoveItem\",\n    value: function RemoveItem(state, key) {\n      var newState = {};\n      Object.keys(state).filter(function (k) {\n        return k !== key;\n      }).forEach(function (k) {\n        newState[k] = state[k];\n      });\n      return newState;\n    }\n  }]);\n\n  return Collection;\n}();","map":null,"metadata":{},"sourceType":"module"}