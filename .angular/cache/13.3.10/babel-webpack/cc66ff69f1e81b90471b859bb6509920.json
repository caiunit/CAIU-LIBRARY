{"ast":null,"code":"import _defineProperty from \"C:\\\\Users\\\\dsalgado.contr\\\\source\\\\Workspaces\\\\CAIU-LIBRARY\\\\CAIU-LIBRARY\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\defineProperty.js\";\nimport { FormBuilder } from '@angular/forms';\nimport { FormArray } from './models';\nimport { getAllProps, ignoreKey, inArray, build, getValue } from '../shared/utils';\nexport function buildAbstractControl(fb, value) {\n  return isGroupValue(value) ? fb.group(buildControlsConfig(value, fb)) : fb.control(value);\n}\n/**\r\n * Construct form builder and initialize new form array\r\n */\n\nexport function buildArrayFromType(ctor, validator, asyncValidator) {\n  var fb = new FormBuilder();\n  return FormArray.BuildWithType(ctor, fb, [], validator, asyncValidator);\n}\nexport function buildControl(fb, model, key) {\n  return isFormGroup(model, key) ? fb.group(buildControlsConfig(model[key], fb)) : isFormArray(model, key) ? buildFormArray(fb, model, key) : hasValidators(model, key) ? [model[key], model['metadata'][key]['validators']] : [model[key]];\n}\n/**\r\n * Construct form builder and initialize new form group.\r\n */\n\nexport function buildControlFromModel(model) {\n  var fb = new FormBuilder();\n  var controlsConfig = buildControlsConfig(model, fb);\n  return hasGroupValidators(model) ? fb.group(controlsConfig, model['metadata']['validators']) : fb.group(controlsConfig);\n}\n/**\r\n * Function to recursively construct form control config object.\r\n */\n\nexport function buildControlsConfig(model, fb) {\n  var keys = getAllProps(model);\n  var config = {};\n  return keys.filter(function (key) {\n    return key !== 'metadata' && !ignoreKey(model, key);\n  }).reduce(function (acc, key) {\n    return Object.assign({}, acc, _defineProperty({}, key, buildControl(fb, model, key)));\n  }, {});\n}\n/**\r\n * Initialize new form array.\r\n */\n\nexport function buildFormArray(fb, model, key) {\n  var ctor = findFormArrayType(model, key);\n  var value = model[key];\n  var controls = buildFormArrayControls(fb, value, ctor);\n  return ctor ? FormArray.BuildWithType(ctor, fb, controls) : FormArray.Build(fb, []);\n}\nexport function buildFormArrayControls(fb, value, ctor) {\n  return ctor ? value.map(function (x) {\n    return buildAbstractControl(fb, getValue(build(ctor, x)));\n  }) : value.map(function (x) {\n    return buildAbstractControl(fb, x);\n  });\n}\nexport function findFormArrayType(model, key) {\n  return model['metadata'] && model['metadata'][key] ? model['metadata'][key]['type'] : null;\n}\nexport function hasGroupValidators(model) {\n  return model['metadata'] && model['metadata']['validators'];\n}\nexport function hasValidators(model, key) {\n  return model['metadata'] && model['metadata'][key] && model['metadata'][key]['validators'];\n}\nexport function isArrayValue(value) {\n  return Array.isArray(value);\n}\nexport function isFormArray(model, key) {\n  return Array.isArray(model[key]) && model['metadata'] && model['metadata'][key] && model['metadata'][key]['isFormArray'];\n}\nexport function isFormControl(model, key) {\n  return model['metadata'] && model['metadata']['controls'] && inArray(model['metadata']['controls'], key);\n}\nexport function isFormGroup(model, key) {\n  return model[key] && typeof model[key] === 'object' && !Array.isArray(model[key]) && Object.keys(model[key]).length > 0 && !isFormControl(model, key) && !isFormArray(model, key);\n}\nexport function isGroupValue(value) {\n  return typeof value === 'object' && Object.keys(value).length > 0 && !isArrayValue(value);\n}","map":null,"metadata":{},"sourceType":"module"}