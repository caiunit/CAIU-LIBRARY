{"ast":null,"code":"import _toConsumableArray from \"C:\\\\Users\\\\dsalgado.contr\\\\source\\\\Workspaces\\\\CAIU-LIBRARY\\\\CAIU-LIBRARY\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\toConsumableArray.js\";\nimport _classCallCheck from \"C:\\\\Users\\\\dsalgado.contr\\\\source\\\\Workspaces\\\\CAIU-LIBRARY\\\\CAIU-LIBRARY\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\classCallCheck.js\";\nimport _createClass from \"C:\\\\Users\\\\dsalgado.contr\\\\source\\\\Workspaces\\\\CAIU-LIBRARY\\\\CAIU-LIBRARY\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\createClass.js\";\nimport { build } from './utils';\nexport var Permutation = /*#__PURE__*/function () {\n  function Permutation(order) {\n    _classCallCheck(this, Permutation);\n\n    this.order = order;\n    this._timestamp = new Date();\n  }\n\n  _createClass(Permutation, [{\n    key: \"ranks\",\n    get: function get() {\n      return this.order.sort(function (a, b) {\n        return a.order - b.order;\n      }).map(function (x, index) {\n        return Object.assign({}, x, {\n          rank: index + 1\n        });\n      });\n    }\n  }, {\n    key: \"timestamp\",\n    get: function get() {\n      return this._timestamp;\n    }\n  }]);\n\n  return Permutation;\n}();\nexport var OrderedItem = /*#__PURE__*/_createClass(function OrderedItem(item) {\n  _classCallCheck(this, OrderedItem);\n\n  this.item = item;\n});\nexport var Ordering = /*#__PURE__*/function () {\n  function Ordering(_items, ctor, orderKey) {\n    var idKey = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'id';\n\n    _classCallCheck(this, Ordering);\n\n    this._items = _items;\n    this.ctor = ctor;\n    this.orderKey = orderKey;\n    this.idKey = idKey;\n    this._history = [];\n  }\n\n  _createClass(Ordering, [{\n    key: \"count\",\n    get: function get() {\n      return this.items.length;\n    }\n  }, {\n    key: \"history\",\n    get: function get() {\n      return this._history;\n    }\n  }, {\n    key: \"instance\",\n    get: function get() {\n      return new this.ctor();\n    }\n  }, {\n    key: \"items\",\n    get: function get() {\n      var _this = this;\n\n      return this._items.sort(function (a, b) {\n        return _this.getItemOrder(a) - _this.getItemOrder(b);\n      });\n    }\n  }, {\n    key: \"maxIndex\",\n    get: function get() {\n      return this.count === 0 ? 0 : Math.max.apply(Math, _toConsumableArray(this.order.map(function (x) {\n        return x.order;\n      })));\n    }\n  }, {\n    key: \"order\",\n    get: function get() {\n      return this.permutation.ranks;\n    }\n  }, {\n    key: \"permutation\",\n    get: function get() {\n      var _this2 = this;\n\n      return new Permutation(this.items.map(function (item) {\n        return {\n          id: _this2.getItemId(item),\n          order: _this2.getItemOrder(item)\n        };\n      }));\n    }\n  }, {\n    key: \"nextPosition\",\n    get: function get() {\n      return this.maxIndex + 1;\n    }\n  }, {\n    key: \"addItem\",\n    value: function addItem(item) {\n      return this.addItemAtPosition(item, this.nextPosition);\n    }\n  }, {\n    key: \"addItemAtPosition\",\n    value: function addItemAtPosition(item, pos) {\n      var _this3 = this;\n\n      var newItemId = this.getItemId(item);\n      return [].concat(_toConsumableArray(this.items), [build(this.ctor, item, {\n        order: pos\n      })]).map(function (x) {\n        var order = _this3.getItemOrder(x);\n\n        var id = _this3.getItemId(x);\n\n        return order <= pos || id === newItemId ? x : build(_this3.ctor, x, {\n          order: order + 1\n        });\n      });\n    }\n  }, {\n    key: \"archive\",\n    value: function archive(items) {\n      var permutation = items ? this.getPermutation(items) : this.permutation;\n      this._history = [].concat(_toConsumableArray(this._history), [permutation]);\n    }\n  }, {\n    key: \"getItemId\",\n    value: function getItemId(item) {\n      return item[this.idKey];\n    }\n  }, {\n    key: \"getItemOrder\",\n    value: function getItemOrder(item) {\n      return item[this.orderKey];\n    }\n  }, {\n    key: \"getPermutation\",\n    value: function getPermutation(items) {\n      var _this4 = this;\n\n      return new Permutation(items.map(function (item) {\n        return {\n          id: _this4.getItemId(item),\n          order: _this4.getItemOrder(item)\n        };\n      }));\n    }\n  }, {\n    key: \"move\",\n    value: function move(item, to) {\n      var _this5 = this;\n\n      var from = this.getItemOrder(item);\n      var itemId = this.getItemId(item);\n\n      if (to === from) {\n        return _toConsumableArray(this.items);\n      } else if (to < from) {\n        return this.items.map(function (x) {\n          var order = _this5.getItemOrder(x);\n\n          var id = _this5.getItemId(x);\n\n          return id === itemId ? build(_this5.ctor, x, {\n            order: to\n          }) : order < to || order > from ? x : build(_this5.ctor, x, {\n            order: order + 1\n          });\n        });\n      } else {\n        // to > from\n        return this.items.map(function (x) {\n          var order = _this5.getItemOrder(x);\n\n          var id = _this5.getItemId(x);\n\n          return id === itemId ? build(_this5.ctor, x, {\n            order: to\n          }) : order < from || order > to ? x : build(_this5.ctor, x, {\n            order: order - 1\n          });\n        });\n      }\n    }\n  }, {\n    key: \"moveDown\",\n    value: function moveDown(item) {\n      return this.move(item, this.getItemOrder(item) + 1);\n    }\n  }, {\n    key: \"moveUp\",\n    value: function moveUp(item) {\n      return this.move(item, this.getItemOrder(item) - 1);\n    }\n  }, {\n    key: \"removeItem\",\n    value: function removeItem(item) {\n      return this.removeItemAtPosition(this.getItemOrder(item));\n    }\n  }, {\n    key: \"removeItemAtPosition\",\n    value: function removeItemAtPosition(pos) {\n      var _this6 = this;\n\n      return this.items.filter(function (item) {\n        return _this6.getItemOrder(item) !== pos;\n      }).map(function (x) {\n        var order = _this6.getItemOrder(x);\n\n        return order < pos ? x : build(_this6.ctor, x, {\n          order: order - 1\n        });\n      });\n    }\n  }, {\n    key: \"updateItems\",\n    value: function updateItems(items) {\n      this.archive();\n      this._items = items;\n    }\n  }]);\n\n  return Ordering;\n}();","map":null,"metadata":{},"sourceType":"module"}