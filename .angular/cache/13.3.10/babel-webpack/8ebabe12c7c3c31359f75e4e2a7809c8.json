{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\dsalgado.contr\\\\source\\\\Workspaces\\\\CAIU-LIBRARY\\\\CAIU-LIBRARY\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\classCallCheck.js\";\nimport _createClass from \"C:\\\\Users\\\\dsalgado.contr\\\\source\\\\Workspaces\\\\CAIU-LIBRARY\\\\CAIU-LIBRARY\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\createClass.js\";\nimport { forwardRef } from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { LOOKUP_STATES } from '../../../shared/lookup';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/material/form-field\";\nimport * as i2 from \"@angular/material/select\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"@angular/material/core\";\n\nfunction StatePickerComponent_mat_option_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-option\", 2);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var state_r1 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", state_r1.name);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate2(\" \", state_r1.label, \" (\", state_r1.name, \") \");\n  }\n}\n\nexport var STATE_PICKER_ACCESSOR = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(function () {\n    return StatePickerComponent;\n  }),\n  multi: true\n};\nexport var StatePickerComponent = /*#__PURE__*/(function () {\n  var StatePickerComponent = /*#__PURE__*/function () {\n    function StatePickerComponent() {\n      _classCallCheck(this, StatePickerComponent);\n\n      this.states = LOOKUP_STATES;\n    }\n\n    _createClass(StatePickerComponent, [{\n      key: \"registerOnChange\",\n      value: function registerOnChange(fn) {\n        this.onModelChange = fn;\n      }\n    }, {\n      key: \"registerOnTouched\",\n      value: function registerOnTouched(fn) {\n        this.onTouch = fn;\n      }\n    }, {\n      key: \"writeValue\",\n      value: function writeValue(value) {\n        this.value = value;\n      }\n    }, {\n      key: \"onChange\",\n      value: function onChange(value) {\n        this.onModelChange(value);\n      }\n    }]);\n\n    return StatePickerComponent;\n  }();\n\n  StatePickerComponent.ɵfac = function StatePickerComponent_Factory(t) {\n    return new (t || StatePickerComponent)();\n  };\n\n  StatePickerComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: StatePickerComponent,\n    selectors: [[\"iu-state-picker\"]],\n    features: [i0.ɵɵProvidersFeature([STATE_PICKER_ACCESSOR])],\n    decls: 3,\n    vars: 2,\n    consts: [[\"placeholder\", \"State\", 3, \"value\", \"selectionChange\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [3, \"value\"]],\n    template: function StatePickerComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"mat-form-field\")(1, \"mat-select\", 0);\n        i0.ɵɵlistener(\"selectionChange\", function StatePickerComponent_Template_mat_select_selectionChange_1_listener($event) {\n          return ctx.onChange($event.value);\n        });\n        i0.ɵɵtemplate(2, StatePickerComponent_mat_option_2_Template, 2, 3, \"mat-option\", 1);\n        i0.ɵɵelementEnd()();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"value\", ctx.value);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngForOf\", ctx.states);\n      }\n    },\n    directives: [i1.MatFormField, i2.MatSelect, i3.NgForOf, i4.MatOption],\n    styles: [\"\"]\n  });\n  return StatePickerComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}